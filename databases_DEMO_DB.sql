create or replace database DEMO_DB;

create or replace schema BK;

create or replace TABLE BK_TBPOC_GC_HEADER_DIM (
	DW_GC_HEADER VARCHAR(32700),
	DW_DAY VARCHAR(32700),
	DW_MINUTE VARCHAR(32700),
	DW_RESTID VARCHAR(32700),
	DW_OCCASION VARCHAR(32700),
	DW_TENDERTYPE VARCHAR(32700),
	TICKETNO VARCHAR(32700),
	FIRSTITEMTIME VARCHAR(32700),
	STOREDORDERTIME VARCHAR(32700),
	RECALLEDORDERTIME VARCHAR(32700),
	AMOUNTTENDERTIME VARCHAR(32700),
	SERVEDORDERTIME VARCHAR(32700),
	ORDERTOTALEDTIME VARCHAR(32700),
	PARKEDORDERTIME VARCHAR(32700),
	REGISTERNO VARCHAR(32700),
	REGISTERSEQNO VARCHAR(32700),
	TOTPROMOSALES VARCHAR(32700),
	TOTGROSSSALES VARCHAR(32700),
	TOTNETSALES VARCHAR(32700),
	TOTTAX VARCHAR(32700),
	REFUNDFLAG VARCHAR(32700),
	CASHIERID VARCHAR(32700),
	TRAININGFLAG VARCHAR(32700),
	DW_CHANNEL VARCHAR(32700),
	ORDERCHECKINTIME VARCHAR(32700),
	DW_CONSUMER_IDENTIFIER VARCHAR(32700),
	DW_CHECK_IN_LOCATION_IDENTIFIER VARCHAR(32700)
);
create or replace TABLE BK_TBPOC_TENDER_FACT (
	DW_GC_HEADER VARCHAR(32700),
	DW_DAY VARCHAR(32700),
	DW_MINUTE VARCHAR(32700),
	DW_RESTID VARCHAR(32700),
	DW_OCCASION VARCHAR(32700),
	DW_TENDERTYPE VARCHAR(32700),
	DW_TENDERTYPE_SEQ VARCHAR(32700),
	TENDERREFUNDFLAG VARCHAR(32700),
	TENDERSUBTYPE VARCHAR(32700),
	TENDERACCTNO VARCHAR(32700),
	TENDERREDEMPTIONAMT VARCHAR(32700),
	TENDERACTTIP VARCHAR(32700),
	DW_CHECK_IN_LOCATION_IDENTIFIER VARCHAR(32700)
);
create or replace schema DEMO1;

create or replace TABLE AE_CUSTOMERS (
	"id" VARCHAR(32700),
	"empname" VARCHAR(32700),
	"Empnum" VARCHAR(32700),
	"WorkorderID" VARCHAR(32700),
	"NonBillableHours" VARCHAR(32700),
	"BillableHours" VARCHAR(32700),
	"Price" VARCHAR(32700),
	"Revenue" VARCHAR(32700),
	"DateDone" VARCHAR(32700),
	"Year" VARCHAR(32700),
	"Month" VARCHAR(32700),
	"Week" VARCHAR(32700),
	"MonthID" VARCHAR(32700),
	"CustomerID" VARCHAR(32700),
	"Currency" VARCHAR(32700),
	"Category" VARCHAR(32700),
	"Description" VARCHAR(32700),
	"Comments" VARCHAR(32700),
	"ContractNumber" VARCHAR(32700),
	"WorkType" VARCHAR(32700),
	"UseContract" VARCHAR(32700),
	"ProdCode" VARCHAR(32700)
);
create or replace TABLE LINEITEMSCHEMA (
	L_ORDERKEY NUMBER(38,0) NOT NULL,
	L_PARTKEY NUMBER(38,0) NOT NULL,
	L_SUPPKEY NUMBER(38,0) NOT NULL,
	L_LINENUMBER NUMBER(38,0) NOT NULL,
	L_QUANTITY NUMBER(15,2) NOT NULL,
	L_EXTENDEDPRICE NUMBER(15,2) NOT NULL,
	L_DISCOUNT NUMBER(15,2) NOT NULL,
	L_TAX NUMBER(15,2) NOT NULL,
	L_RETURNFLAG VARCHAR(1) NOT NULL,
	L_LINESTATUS VARCHAR(1) NOT NULL,
	L_SHIPDATE DATE NOT NULL,
	L_COMMITDATE DATE NOT NULL,
	L_RECEIPTDATE DATE NOT NULL,
	L_SHIPINSTRUCT VARCHAR(25) NOT NULL,
	L_SHIPMODE VARCHAR(10) NOT NULL,
	L_COMMENT VARCHAR(44) NOT NULL
);
create or replace TABLE SFDCACCOUNTS (
	"AccountNumber" VARCHAR(32700),
	"AccountSource" VARCHAR(32700),
	"Active__c" VARCHAR(32700),
	"AnnualRevenue" VARCHAR(32700),
	"BillingCity" VARCHAR(32700),
	"BillingCountry" VARCHAR(32700),
	"BillingLatitude" VARCHAR(32700),
	"BillingLongitude" VARCHAR(32700),
	"BillingPostalCode" VARCHAR(32700),
	"BillingState" VARCHAR(32700),
	"BillingStreet" VARCHAR(32700),
	"CreatedById" VARCHAR(32700),
	"CreatedDate" VARCHAR(32700),
	"CustomerPriority__c" VARCHAR(32700),
	"Description" VARCHAR(32700),
	"Fax" VARCHAR(32700),
	"Id" VARCHAR(32700),
	"Industry" VARCHAR(32700),
	"IsCustomerPortal" VARCHAR(32700),
	"IsDeleted" VARCHAR(32700),
	"Jigsaw" VARCHAR(32700),
	"JigsawCompanyId" VARCHAR(32700),
	"LastActivityDate" VARCHAR(32700),
	"LastModifiedById" VARCHAR(32700),
	"LastModifiedDate" VARCHAR(32700),
	"LastReferencedDate" VARCHAR(32700),
	"LastViewedDate" VARCHAR(32700),
	"MasterRecordId" VARCHAR(32700),
	"Name" VARCHAR(32700),
	"NumberOfEmployees" VARCHAR(32700),
	"NumberofLocations__c" VARCHAR(32700),
	"OwnerId" VARCHAR(32700),
	"Ownership" VARCHAR(32700),
	"ParentId" VARCHAR(32700),
	"Phone" VARCHAR(32700),
	"PhotoUrl" VARCHAR(32700),
	"Rating" VARCHAR(32700),
	"SAP_Customer_Number__c" VARCHAR(32700),
	"ShippingCity" VARCHAR(32700),
	"ShippingCountry" VARCHAR(32700),
	"ShippingLatitude" VARCHAR(32700),
	"ShippingLongitude" VARCHAR(32700),
	"ShippingPostalCode" VARCHAR(32700),
	"ShippingState" VARCHAR(32700),
	"ShippingStreet" VARCHAR(32700),
	"Sic" VARCHAR(32700),
	"SicDesc" VARCHAR(32700),
	"Site" VARCHAR(32700),
	"SLA__c" VARCHAR(32700),
	"SLAExpirationDate__c" VARCHAR(32700),
	"SLASerialNumber__c" VARCHAR(32700),
	"SystemModstamp" VARCHAR(32700),
	"TickerSymbol" VARCHAR(32700),
	"Type" VARCHAR(32700),
	"UpsellOpportunity__c" VARCHAR(32700),
	"Website" VARCHAR(32700)
);
create or replace TABLE "account" (
	"account_id" VARCHAR(32700),
	"district_id" VARCHAR(32700),
	"frequency" VARCHAR(32700),
	"date" VARCHAR(32700)
);
create or replace TABLE "card" (
	"card_id" VARCHAR(32700),
	"disp_id" VARCHAR(32700),
	"type" VARCHAR(32700),
	"issued" VARCHAR(32700)
);
create or replace TABLE "client" (
	A1 VARCHAR(32700),
	A2 VARCHAR(32700),
	A3 VARCHAR(32700),
	A4 VARCHAR(32700),
	A5 VARCHAR(32700),
	A6 VARCHAR(32700),
	A7 VARCHAR(32700),
	A8 VARCHAR(32700),
	A9 VARCHAR(32700),
	A10 VARCHAR(32700),
	A11 VARCHAR(32700),
	A12 VARCHAR(32700),
	A13 VARCHAR(32700),
	A14 VARCHAR(32700),
	A15 VARCHAR(32700),
	A16 VARCHAR(32700)
);
create or replace TABLE "disp" (
	"disp_id" VARCHAR(32700),
	"client_id" VARCHAR(32700),
	"account_id" VARCHAR(32700),
	"type" VARCHAR(32700)
);
create or replace TABLE "district" (
	A1 VARCHAR(32700),
	A2 VARCHAR(32700),
	A3 VARCHAR(32700),
	A4 VARCHAR(32700),
	A5 VARCHAR(32700),
	A6 VARCHAR(32700),
	A7 VARCHAR(32700),
	A8 VARCHAR(32700),
	A9 VARCHAR(32700),
	A10 VARCHAR(32700),
	A11 VARCHAR(32700),
	A12 VARCHAR(32700),
	A13 VARCHAR(32700),
	A14 VARCHAR(32700),
	A15 VARCHAR(32700),
	A16 VARCHAR(32700)
);
create or replace TABLE "loan" (
	"loan_id" VARCHAR(32700),
	"account_id" VARCHAR(32700),
	"date" VARCHAR(32700),
	"amount" VARCHAR(32700),
	"duration" VARCHAR(32700),
	"payments" VARCHAR(32700),
	"status" VARCHAR(32700)
);
create or replace TABLE "order" (
	"order_id" VARCHAR(32700),
	"account_id" VARCHAR(32700),
	"bank_to" VARCHAR(32700),
	"account_to" VARCHAR(32700),
	"amount" VARCHAR(32700),
	"k_symbol" VARCHAR(32700)
);
create or replace TABLE "trans" (
	"trans_id" VARCHAR(32700),
	"account_id" VARCHAR(32700),
	"date" VARCHAR(32700),
	"type" VARCHAR(32700),
	"operation" VARCHAR(32700),
	"amount" VARCHAR(32700),
	"balance" VARCHAR(32700),
	"k_symbol" VARCHAR(32700),
	"bank" VARCHAR(32700),
	"account" VARCHAR(32700)
);
CREATE OR REPLACE FUNCTION "ADD"(A NUMBER, B NUMBER)
RETURNS NUMBER(38,0)
LANGUAGE SQL
COMMENT='add two numbers'
AS 'a + b';
create or replace schema DEV_SCHEMA;

create or replace TABLE AE_NEW (
	CITY VARCHAR(32700),
	ADDRESS VARCHAR(32700),
	COMPANYNAME VARCHAR(32700),
	FIRSTNAME VARCHAR(32700),
	LASTNAME VARCHAR(32700),
	COUNTRY VARCHAR(32700),
	REGION VARCHAR(32700),
	STREET VARCHAR(32700)
);
create or replace TABLE CAT_TEST (
	"timestamp" VARCHAR(32700),
	"id" VARCHAR(32700),
	"one" VARCHAR(32700),
	"two" VARCHAR(32700)
);
create or replace TABLE COMPLETED_WORK_ORDERS (
	"id" VARCHAR(32700),
	"empname" VARCHAR(32700),
	"Empnum" VARCHAR(32700),
	"WorkorderID" VARCHAR(32700),
	"NonBillableHours" VARCHAR(32700),
	"BillableHours" VARCHAR(32700),
	"Price" VARCHAR(32700),
	"Revenue" VARCHAR(32700),
	"DateDone" VARCHAR(32700),
	"Year" VARCHAR(32700),
	"Month" VARCHAR(32700),
	"Week" VARCHAR(32700),
	"MonthID" VARCHAR(32700),
	"CustomerID" VARCHAR(32700),
	"Currency" VARCHAR(32700),
	"Category" VARCHAR(32700),
	"Description" VARCHAR(32700),
	"Comments" VARCHAR(32700),
	"ContractNumber" VARCHAR(32700),
	"WorkType" VARCHAR(32700),
	"UseContract" VARCHAR(32700),
	"ProdCode" VARCHAR(32700)
);
create or replace TABLE DATE_TEST (
	DATE TIMESTAMP_NTZ(9)
)COMMENT='Table for testing date'
;
create or replace TABLE EMPLOYEE (
	ID FLOAT,
	NAME VARCHAR(16777216),
	ADDRESS VARCHAR(16777216),
	JOINING_DATE VARCHAR(16777216)
)COMMENT='A sample employee table'
;
create or replace TABLE HPFC_SCD1 (
	"Id" VARCHAR(32700),
	TIME_STAMP VARCHAR(32700),
	LOAN_NUMBER VARCHAR(32700),
	OLD_LOAN_NUMBER VARCHAR(32700),
	ZONE VARCHAR(32700),
	BRANCH_OFFICER_CODE VARCHAR(32700),
	EMPLOYEE_CODE VARCHAR(32700),
	LOAN_PURPOSE VARCHAR(32700),
	ORIGINAL_OCCUPANCY_STATUS VARCHAR(32700),
	HI_TYPE VARCHAR(32700),
	LO_TYPE VARCHAR(32700),
	PROPERTY_CITY_NAME VARCHAR(32700),
	PROPERTY_STATE VARCHAR(32700),
	PROPERTY_ZIP VARCHAR(32700),
	ZIP_CODE_SUFFIX VARCHAR(32700),
	PROPERTY_TYPE VARCHAR(32700),
	SMSA_TRACK_CODE VARCHAR(32700),
	SMSA_CODE VARCHAR(32700),
	PROPERTY_STATE_CODE VARCHAR(32700),
	COUNTY_CODE VARCHAR(32700),
	ORIGINAL_PROPERTY_VALUE VARCHAR(32700),
	PROPERTY_VALUE VARCHAR(32700),
	FLOOD_ZONE1 VARCHAR(32700),
	FLOOD_ZONE23 VARCHAR(32700),
	FLOOD_LOMA_DETERMINATION_DATE VARCHAR(32700),
	LOAN_CLOSING_DATE VARCHAR(32700),
	ORIGINAL_MORTGAGE_AMOUNT VARCHAR(32700),
	PRINCIPAL_BALANCE VARCHAR(32700),
	ORIGINAL_INTEREST_RATE VARCHAR(32700),
	ANNUAL_INTEREST_RATE VARCHAR(32700),
	ESCROW_BALANCE VARCHAR(32700),
	ESCROW_ADVANCE_BALANCE VARCHAR(32700),
	SUSPENSE_BALANCE VARCHAR(32700),
	REPLACEMENT_RESERVE_BALANCE VARCHAR(32700),
	REPLACEMENT_RESERVE_AMOUNT VARCHAR(32700),
	RESTRICTED_ESCROW_BALANCE VARCHAR(32700),
	FIRST_DUE_DATE VARCHAR(32700),
	NEXT_DUE_DATE VARCHAR(32700),
	LOAN_MATURITY_DATE VARCHAR(32700),
	LOAN_TERM VARCHAR(32700),
	LAST_FULL_PAYMENT_DATE VARCHAR(32700),
	TOTAL_MONTHLY_PAYMENT VARCHAR(32700),
	DRAFTING_INDICATOR VARCHAR(32700),
	PRINCIPAL_AND_INTEREST_PAYMENT VARCHAR(32700),
	T_AND_I_MONTHLY_AMOUNT VARCHAR(32700),
	ESCROW_A_H_PREMIUM_AMOUNT VARCHAR(32700),
	LATE_CHARGE_STOP_CODE VARCHAR(32700)
);
create or replace TABLE HPFC_SCD1_BULK_LOAD (
	"Id" VARCHAR(32700),
	TIME_STAMP VARCHAR(32700),
	LOAN_NUMBER VARCHAR(32700),
	OLD_LOAN_NUMBER VARCHAR(32700),
	ZONE VARCHAR(32700),
	BRANCH_OFFICER_CODE VARCHAR(32700),
	EMPLOYEE_CODE VARCHAR(32700),
	LOAN_PURPOSE VARCHAR(32700),
	ORIGINAL_OCCUPANCY_STATUS VARCHAR(32700),
	HI_TYPE VARCHAR(32700),
	LO_TYPE VARCHAR(32700),
	PROPERTY_CITY_NAME VARCHAR(32700),
	PROPERTY_STATE VARCHAR(32700),
	PROPERTY_ZIP VARCHAR(32700),
	ZIP_CODE_SUFFIX VARCHAR(32700),
	PROPERTY_TYPE VARCHAR(32700),
	SMSA_TRACK_CODE VARCHAR(32700),
	SMSA_CODE VARCHAR(32700),
	PROPERTY_STATE_CODE VARCHAR(32700),
	COUNTY_CODE VARCHAR(32700),
	ORIGINAL_PROPERTY_VALUE VARCHAR(32700),
	PROPERTY_VALUE VARCHAR(32700),
	FLOOD_ZONE1 VARCHAR(32700),
	FLOOD_ZONE23 VARCHAR(32700),
	FLOOD_LOMA_DETERMINATION_DATE VARCHAR(32700),
	LOAN_CLOSING_DATE VARCHAR(32700),
	ORIGINAL_MORTGAGE_AMOUNT VARCHAR(32700),
	PRINCIPAL_BALANCE VARCHAR(32700),
	ORIGINAL_INTEREST_RATE VARCHAR(32700),
	ANNUAL_INTEREST_RATE VARCHAR(32700),
	ESCROW_BALANCE VARCHAR(32700),
	ESCROW_ADVANCE_BALANCE VARCHAR(32700),
	SUSPENSE_BALANCE VARCHAR(32700),
	REPLACEMENT_RESERVE_BALANCE VARCHAR(32700),
	REPLACEMENT_RESERVE_AMOUNT VARCHAR(32700),
	RESTRICTED_ESCROW_BALANCE VARCHAR(32700),
	FIRST_DUE_DATE VARCHAR(32700),
	NEXT_DUE_DATE VARCHAR(32700),
	LOAN_MATURITY_DATE VARCHAR(32700),
	LOAN_TERM VARCHAR(32700),
	LAST_FULL_PAYMENT_DATE VARCHAR(32700),
	TOTAL_MONTHLY_PAYMENT VARCHAR(32700),
	DRAFTING_INDICATOR VARCHAR(32700),
	PRINCIPAL_AND_INTEREST_PAYMENT VARCHAR(32700),
	T_AND_I_MONTHLY_AMOUNT VARCHAR(32700),
	ESCROW_A_H_PREMIUM_AMOUNT VARCHAR(32700),
	LATE_CHARGE_STOP_CODE VARCHAR(32700)
);
create or replace TABLE HPFC_SCD1_BULK_LOAD_2 (
	"Id" VARCHAR(32700),
	TIME_STAMP VARCHAR(32700),
	LOAN_NUMBER VARCHAR(32700),
	OLD_LOAN_NUMBER VARCHAR(32700),
	ZONE VARCHAR(32700),
	BRANCH_OFFICER_CODE VARCHAR(32700),
	EMPLOYEE_CODE VARCHAR(32700),
	LOAN_PURPOSE VARCHAR(32700),
	ORIGINAL_OCCUPANCY_STATUS VARCHAR(32700),
	HI_TYPE VARCHAR(32700),
	LO_TYPE VARCHAR(32700),
	PROPERTY_CITY_NAME VARCHAR(32700),
	PROPERTY_STATE VARCHAR(32700),
	PROPERTY_ZIP VARCHAR(32700),
	ZIP_CODE_SUFFIX VARCHAR(32700),
	PROPERTY_TYPE VARCHAR(32700),
	SMSA_TRACK_CODE VARCHAR(32700),
	SMSA_CODE VARCHAR(32700),
	PROPERTY_STATE_CODE VARCHAR(32700),
	COUNTY_CODE VARCHAR(32700),
	ORIGINAL_PROPERTY_VALUE VARCHAR(32700),
	PROPERTY_VALUE VARCHAR(32700),
	FLOOD_ZONE1 VARCHAR(32700),
	FLOOD_ZONE23 VARCHAR(32700),
	FLOOD_LOMA_DETERMINATION_DATE VARCHAR(32700),
	LOAN_CLOSING_DATE VARCHAR(32700),
	ORIGINAL_MORTGAGE_AMOUNT VARCHAR(32700),
	PRINCIPAL_BALANCE VARCHAR(32700),
	ORIGINAL_INTEREST_RATE VARCHAR(32700),
	ANNUAL_INTEREST_RATE VARCHAR(32700),
	ESCROW_BALANCE VARCHAR(32700),
	ESCROW_ADVANCE_BALANCE VARCHAR(32700),
	SUSPENSE_BALANCE VARCHAR(32700),
	REPLACEMENT_RESERVE_BALANCE VARCHAR(32700),
	REPLACEMENT_RESERVE_AMOUNT VARCHAR(32700),
	RESTRICTED_ESCROW_BALANCE VARCHAR(32700),
	FIRST_DUE_DATE VARCHAR(32700),
	NEXT_DUE_DATE VARCHAR(32700),
	LOAN_MATURITY_DATE VARCHAR(32700),
	LOAN_TERM VARCHAR(32700),
	LAST_FULL_PAYMENT_DATE VARCHAR(32700),
	TOTAL_MONTHLY_PAYMENT VARCHAR(32700),
	DRAFTING_INDICATOR VARCHAR(32700),
	PRINCIPAL_AND_INTEREST_PAYMENT VARCHAR(32700),
	T_AND_I_MONTHLY_AMOUNT VARCHAR(32700),
	ESCROW_A_H_PREMIUM_AMOUNT VARCHAR(32700),
	LATE_CHARGE_STOP_CODE VARCHAR(32700)
);
create or replace TABLE HPFC_SCD1_BULK_LOAD_3 (
	ANNUAL_INTEREST_RATE VARCHAR(32700),
	BRANCH_OFFICER_CODE VARCHAR(32700),
	COUNTY_CODE VARCHAR(32700),
	DRAFTING_INDICATOR VARCHAR(32700),
	EMPLOYEE_CODE VARCHAR(32700),
	ESCROW_A_H_PREMIUM_AMOUNT VARCHAR(32700),
	ESCROW_ADVANCE_BALANCE VARCHAR(32700),
	ESCROW_BALANCE VARCHAR(32700),
	FIRST_DUE_DATE VARCHAR(32700),
	TIME_STAMP VARCHAR(32700),
	LOAN_NUMBER VARCHAR(32700)
);
create or replace TABLE JSON_SAMPLE (
	JSON_COLUMN VARIANT
);
create or replace TABLE PURCHASE_RECORD_MS (
	DISPOSITION VARCHAR(32700),
	DISPOSITIONDATE VARCHAR(32700)
);
create or replace TABLE SYMMETRIC_EVENT_STAGE (
	CHAIN_ID NUMBER(38,0),
	SOURCE_SYSTEM_NAME VARCHAR(255),
	TABLE_NAME VARCHAR(255),
	PROCESS_TIMESTAMP TIMESTAMP_NTZ(9),
	EVENT_DATA VARIANT,
	NHIN_STORE_ID NUMBER(38,0),
	DML_OPERATION_TYPE VARCHAR(1),
	SOURCE_TIMESTAMP TIMESTAMP_NTZ(9),
	BATCH_ID NUMBER(38,0),
	CHANNEL VARCHAR(20)
);
create or replace TABLE SYMMETRIC_EVENT_STAGE1 (
	CHAIN_ID NUMBER(38,0),
	SOURCE_SYSTEM_NAME VARCHAR(255),
	TABLE_NAME VARCHAR(255),
	PROCESS_TIMESTAMP TIMESTAMP_NTZ(9),
	EVENT_DATA VARIANT,
	NHIN_STORE_ID NUMBER(38,0),
	DML_OPERATION_TYPE VARCHAR(1),
	SOURCE_TIMESTAMP TIMESTAMP_NTZ(9),
	BATCH_ID NUMBER(38,0),
	CHANNEL VARCHAR(20)
);
create or replace TABLE TAM (
	SNO VARCHAR(16777216) NOT NULL
)COMMENT='TAM'
;
create or replace TABLE TESTING_MAYANK (
	TEST VARCHAR(16777216) NOT NULL,
	ID NUMBER(38,0) NOT NULL
);
create or replace TABLE VS_ORCL_SCHEMA (
	"AccountNumber" VARCHAR(4000),
	"AnnualRevenue" NUMBER(38,0),
	"city" VARCHAR(4000),
	"Street" VARCHAR(4000),
	"CreatedDate" VARCHAR(4000),
	"Id" VARCHAR(4000),
	"Phone" VARCHAR(4000),
	LAST_UPDATED_FROM_SFDC TIMESTAMP_NTZ(9)
);
create or replace schema DKIFLE;

create or replace TABLE BOOKSDEMO (
	"@id" VARCHAR(32700),
	"author" VARCHAR(32700),
	"description" VARCHAR(32700),
	"genre" VARCHAR(32700),
	"price" VARCHAR(32700),
	"publish_date" VARCHAR(32700),
	"title" VARCHAR(32700)
);
create or replace TABLE BULKLD_INTERNAL (
	INDICATOR VARCHAR(32700),
	"IndicatorText" VARCHAR(32700),
	REPORTER VARCHAR(32700),
	"Reporting country" VARCHAR(32700),
	FLOW VARCHAR(32700),
	"FlowText" VARCHAR(32700),
	PARTNER VARCHAR(32700),
	"Partner country or zone" VARCHAR(32700),
	SIZECLASS VARCHAR(32700),
	"Size class" VARCHAR(32700),
	TIME VARCHAR(32700),
	"Year" VARCHAR(32700),
	"Value" VARCHAR(32700)
);
create or replace TABLE BULKLD_INTERNAL_MH_DATA (
	"client_id" VARCHAR(32700),
	"account_name" VARCHAR(32700),
	"adj_sequence" VARCHAR(32700),
	"deposit_id" VARCHAR(32700),
	"deposit_batch_id" VARCHAR(32700),
	"deposit_batch_seq" VARCHAR(32700),
	"adj_code" VARCHAR(32700),
	"payment_sequence" VARCHAR(32700),
	"user_id" VARCHAR(32700),
	"note" VARCHAR(32700),
	"adjustment_date" VARCHAR(32700),
	"adjustment_amt" VARCHAR(32700),
	"invoice_date" VARCHAR(32700),
	"retro_invoice_date" VARCHAR(32700),
	"revenue_accn_id" VARCHAR(32700),
	"posted" VARCHAR(32700),
	"print_on_stmt" VARCHAR(32700),
	"aud_rec_id" VARCHAR(32700),
	"x_adjustment_code" VARCHAR(32700),
	"x_client_id" VARCHAR(32700),
	"audit_date" VARCHAR(32700),
	"adjustment_type" VARCHAR(32700)
);
create or replace TABLE DJ_INTERVENTION (
	"intervention_type" VARCHAR(32700),
	"intervention_name" VARCHAR(32700),
	"description" VARCHAR(32700),
	"arm_group_label" VARCHAR(32700),
	"@rank" VARCHAR(32700),
	"brief_title" VARCHAR(32700),
	"acronym" VARCHAR(32700),
	"official_title" VARCHAR(32700),
	"source" VARCHAR(32700),
	"overall_status" VARCHAR(32700),
	"start_date" VARCHAR(32700),
	"phase" VARCHAR(32700),
	"study_type" VARCHAR(32700),
	"study_design" VARCHAR(32700),
	"number_of_arms" VARCHAR(32700),
	"condition" VARCHAR(32700),
	"verification_date" VARCHAR(32700),
	"lastchanged_date" VARCHAR(32700),
	"firstreceived_date" VARCHAR(32700),
	"is_fda_regulated" VARCHAR(32700),
	"has_expanded_access" VARCHAR(32700),
	"other_name" VARCHAR(32700),
	"end_date" VARCHAR(32700),
	"intervention_key" VARCHAR(32700)
);
create or replace TABLE DJ_INTERVENTION_AE (
	"clinical_trial_fact_key" VARCHAR(32700),
	"intertervention_key" VARCHAR(32700)
);
create or replace TABLE DJ_LOCATION (
	"city" VARCHAR(32700),
	"zip" VARCHAR(32700),
	"facility_name" VARCHAR(32700),
	"state" VARCHAR(32700),
	"key" VARCHAR(32700)
);
create or replace TABLE DJ_LOOKER_DEMO (
	"id" VARCHAR(32700),
	"Name" VARCHAR(32700),
	"AccountNumber" VARCHAR(32700),
	"CleanStatus" VARCHAR(32700)
);
create or replace TABLE DJ_PRODUCTS (
	"description" VARCHAR(32700),
	"image" VARCHAR(32700),
	"manufacturer" VARCHAR(32700),
	"model" VARCHAR(32700),
	"name" VARCHAR(32700),
	"price" VARCHAR(32700),
	"shipping" VARCHAR(32700),
	"sku" VARCHAR(32700),
	"type" VARCHAR(32700),
	"url" VARCHAR(32700),
	"upc" VARCHAR(32700),
	"category" VARCHAR(32700)
);
create or replace TABLE DJ_TEST_CSV1 (
	INDICATOR VARCHAR(32700),
	"IndicatorText" VARCHAR(32700),
	REPORTER VARCHAR(32700),
	"Reporting country" VARCHAR(32700),
	FLOW VARCHAR(32700),
	"FlowText" VARCHAR(32700),
	PARTNER VARCHAR(32700),
	"Partner country or zone" VARCHAR(32700),
	SIZECLASS VARCHAR(32700),
	"Size class" VARCHAR(32700),
	TIME VARCHAR(32700),
	"Year" VARCHAR(32700),
	"Value" VARCHAR(32700)
);
create or replace TABLE DJ_TRIAL (
	"brief_title" VARCHAR(32700),
	"clinical_study_rank" VARCHAR(32700),
	"clinical_trial_fact_key" VARCHAR(32700),
	"detailed_description_textblock" VARCHAR(32700),
	"nct_id" VARCHAR(32700),
	"primary_outcome_safety_issue" VARCHAR(32700),
	"source" VARCHAR(32700),
	"condition" VARCHAR(32700),
	"enrollment_type" VARCHAR(32700),
	"official_title" VARCHAR(32700),
	"org_study_id" VARCHAR(32700),
	"overall_status" VARCHAR(32700),
	"oversight_info_authority" VARCHAR(32700),
	"phase" VARCHAR(32700),
	"primary_outcome_description" VARCHAR(32700),
	"start_date" VARCHAR(32700),
	"study_type" VARCHAR(32700),
	"intervention_name" VARCHAR(32700),
	"intervention_type" VARCHAR(32700),
	"intervention_group_key" VARCHAR(32700),
	"location_key" VARCHAR(32700),
	"lead_sponsor_agency" VARCHAR(32700)
);
create or replace TABLE DJ_TROWE_DEMO (
	INDICATOR VARCHAR(32700),
	"IndicatorText" VARCHAR(32700),
	REPORTER VARCHAR(32700),
	"Reporting country" VARCHAR(32700),
	FLOW VARCHAR(32700),
	"FlowText" VARCHAR(32700),
	PARTNER VARCHAR(32700),
	"Partner country or zone" VARCHAR(32700),
	SIZECLASS VARCHAR(32700),
	"Size class" VARCHAR(32700),
	TIME VARCHAR(32700),
	"Year" VARCHAR(32700),
	"Value" VARCHAR(32700)
);
create or replace TABLE KAFKA_DATA (
	"AccountNumber" VARCHAR(32700),
	"AccountSource" VARCHAR(32700),
	"Active__c" VARCHAR(32700),
	"AnnualRevenue" VARCHAR(32700),
	"BillingCity" VARCHAR(32700),
	"BillingCountry" VARCHAR(32700),
	"BillingPostalCode" VARCHAR(32700),
	"BillingState" VARCHAR(32700),
	"BillingStreet" VARCHAR(32700),
	"Description" VARCHAR(32700),
	"Id" VARCHAR(32700),
	"OwnerId" VARCHAR(32700),
	"Phone" VARCHAR(32700),
	"SicDesc" VARCHAR(32700),
	"SLA__c" VARCHAR(32700),
	"Type" VARCHAR(32700),
	"Website" VARCHAR(32700)
);
create or replace TABLE RECRUITS_NO_PII_BULKLOAD (
	"StudentGUID" VARCHAR(32700),
	"CaseGUID" VARCHAR(32700),
	"ProgressionStage" VARCHAR(32700),
	"ProgressionStageType" VARCHAR(32700),
	"ProgressionStatus" VARCHAR(32700),
	"FolderCreateDate" VARCHAR(32700),
	"FolderModDate" VARCHAR(32700),
	"CaseYear" VARCHAR(32700),
	FWID VARCHAR(32700),
	"BannerID" VARCHAR(32700),
	"CommonAppID" VARCHAR(32700),
	"PermanentStreetAddress1" VARCHAR(32700),
	"PermanentStreetAddress2" VARCHAR(32700),
	"PermanentStreetAddress3" VARCHAR(32700),
	"PermanentCity" VARCHAR(32700),
	"PermanentState" VARCHAR(32700),
	"PermanentZipCode" VARCHAR(32700),
	"PermanentCountry" VARCHAR(32700),
	"PermanentPhone" VARCHAR(32700),
	"PermanentAddressInternationalIndicator" VARCHAR(32700),
	"PermanentAddrNotActive" VARCHAR(32700),
	"PermanentAddrStartDate" VARCHAR(32700),
	"MailingAddrStreetAddress1" VARCHAR(32700),
	"MailingAddrStreetAddress2" VARCHAR(32700),
	"MailingAddrStreetAddress3" VARCHAR(32700),
	"MailingAddrCity" VARCHAR(32700),
	"MailingAddrState" VARCHAR(32700),
	"MailingAddrZipCode" VARCHAR(32700),
	"MailingAddrCountry" VARCHAR(32700),
	"MailingAddrPhone" VARCHAR(32700),
	"MailingAddressInternationalIndicator" VARCHAR(32700),
	"MailingAddrExpirationDate" VARCHAR(32700),
	"MailingAddrStartDate" VARCHAR(32700),
	"LocalAddressline1" VARCHAR(32700),
	"LocalAddressline2" VARCHAR(32700),
	"LocalAddressline3" VARCHAR(32700),
	"LocalCity" VARCHAR(32700),
	"LocalState" VARCHAR(32700),
	"LocalZipCode" VARCHAR(32700),
	"LocalCountry" VARCHAR(32700),
	"LocalAddressInternationalIndicator" VARCHAR(32700),
	"LocalAddressStartDate" VARCHAR(32700),
	"LocalAddressExpirationDate" VARCHAR(32700),
	"EmailAddress" VARCHAR(32700),
	"Email2Address" VARCHAR(32700),
	"CellPhone" VARCHAR(32700),
	"WorkPhone" VARCHAR(32700),
	"PreferredContactMethod" VARCHAR(32700),
	"TextingYes" VARCHAR(32700),
	"DateofBirth" VARCHAR(32700),
	"Gender" VARCHAR(32700),
	"GenderDetails" VARCHAR(32700),
	"Veteran" VARCHAR(32700),
	"ReligiousAffiliation" VARCHAR(32700),
	"HomeLanguage" VARCHAR(32700),
	"CitizenshipResidency" VARCHAR(32700),
	"CountryofCitizenship" VARCHAR(32700),
	"CountryofCitizenship2" VARCHAR(32700),
	"CountryofCitizenship3" VARCHAR(32700),
	"VisaType" VARCHAR(32700),
	"BirthCountry" VARCHAR(32700),
	"Ethnicity" VARCHAR(32700),
	"NativeAmerican" VARCHAR(32700),
	"BlackEthnicity" VARCHAR(32700),
	"AsianEthnicity" VARCHAR(32700),
	"HispanicEthnicity" VARCHAR(32700),
	"Caucasian" VARCHAR(32700),
	"NativeHawaiianOtherPacificIslander" VARCHAR(32700),
	"ChooseNottoIdentify" VARCHAR(32700),
	"CentralAmerica" VARCHAR(32700),
	"Cuba" VARCHAR(32700),
	"Mexico" VARCHAR(32700),
	"PuertoRico" VARCHAR(32700),
	"SouthAmerica" VARCHAR(32700),
	"Spain" VARCHAR(32700),
	"HispanicorLatinoOther" VARCHAR(32700),
	"AlaskaNative" VARCHAR(32700),
	"Choctaw" VARCHAR(32700),
	"Cherokee" VARCHAR(32700),
	"Navajo" VARCHAR(32700),
	"AmericanIndianorAlaskaNativeOther" VARCHAR(32700),
	"TribalEnrollment" VARCHAR(32700),
	"TribalEnrollmentNumber" VARCHAR(32700),
	"China" VARCHAR(32700),
	"India" VARCHAR(32700),
	"Japan" VARCHAR(32700),
	"Korea" VARCHAR(32700),
	"Pakistan" VARCHAR(32700),
	"Phillipines" VARCHAR(32700),
	"Vietnam" VARCHAR(32700),
	"OtherEastAsia" VARCHAR(32700),
	"OtherIndianSubcontinent" VARCHAR(32700),
	"OtherSoutheastAsia" VARCHAR(32700),
	"USAfricanAmerican" VARCHAR(32700),
	"Africa" VARCHAR(32700),
	"Caribbean" VARCHAR(32700),
	"BlackorAfricanAmericanOther" VARCHAR(32700),
	"Guam" VARCHAR(32700),
	"Hawaii" VARCHAR(32700),
	"OtherPacificIslandsexcludingPhilippines" VARCHAR(32700),
	"Europe" VARCHAR(32700),
	"MiddleEast" VARCHAR(32700),
	"WhiteOther" VARCHAR(32700),
	"StudentTypeApplicant" VARCHAR(32700),
	"StudentLevelApplicant" VARCHAR(32700),
	"CaseCreateDate" VARCHAR(32700),
	"RecruitStatus" VARCHAR(32700),
	"RecruitType" VARCHAR(32700),
	"InquiryDate" VARCHAR(32700),
	"PrimaryInquirySource" VARCHAR(32700),
	"StopMailDate" VARCHAR(32700),
	"HSGradYear" VARCHAR(32700),
	"InquiryHSCEEB" VARCHAR(32700),
	"InquiryHSName" VARCHAR(32700),
	"InquiryHSState" VARCHAR(32700),
	"InquiryHSCountry" VARCHAR(32700),
	"TransferTermYear" VARCHAR(32700),
	"AcademicInterest1" VARCHAR(32700),
	"AcademicInterest2" VARCHAR(32700),
	"AcademicInterest3" VARCHAR(32700),
	"Howdidyouhearaboutus" VARCHAR(32700),
	"RecruitParentEmail" VARCHAR(32700),
	"EntranceTerm" VARCHAR(32700),
	"DegreeCode" VARCHAR(32700),
	"CollegeCode" VARCHAR(32700),
	"AppStatus" VARCHAR(32700),
	"ResidentorCommuter" VARCHAR(32700),
	"FinAid" VARCHAR(32700),
	"FeeAmount" VARCHAR(32700),
	"InternationalEFC" VARCHAR(32700),
	"ApplicationDate" VARCHAR(32700),
	"CaseCreateDate1" VARCHAR(32700),
	"Legacy" VARCHAR(32700),
	"AthleticEarlyRead" VARCHAR(32700),
	"AthleticRecruit" VARCHAR(32700),
	"RecruitedSport1" VARCHAR(32700),
	"VIPIndicator" VARCHAR(32700),
	"VIPDetails" VARCHAR(32700),
	"FreeField1" VARCHAR(32700),
	"TopAthleticRecruitMMAR" VARCHAR(32700),
	"Candidate1" VARCHAR(32700),
	"Candidate6Banner" VARCHAR(32700),
	"Merit1" VARCHAR(32700),
	"Merit1Value" VARCHAR(32700),
	"FundingOrganization" VARCHAR(32700),
	"FundingAmount" VARCHAR(32700),
	"Activity1" VARCHAR(32700),
	"Interests1" VARCHAR(32700),
	"Interests2" VARCHAR(32700),
	"Interests3" VARCHAR(32700),
	"Interests4" VARCHAR(32700),
	"Interests5" VARCHAR(32700),
	"Interests6" VARCHAR(32700),
	"Interests7" VARCHAR(32700),
	"Interests8" VARCHAR(32700),
	"Interests9" VARCHAR(32700),
	"Interests10" VARCHAR(32700),
	"Interests11" VARCHAR(32700),
	"Interests12" VARCHAR(32700),
	"Interests13" VARCHAR(32700),
	"Interests14" VARCHAR(32700),
	"Interests15" VARCHAR(32700),
	"Interests16" VARCHAR(32700),
	"Interests17" VARCHAR(32700),
	"Interests18" VARCHAR(32700),
	"Interests19" VARCHAR(32700),
	"Interests20" VARCHAR(32700),
	"Interests21" VARCHAR(32700),
	"Interests22" VARCHAR(32700),
	"Interests23" VARCHAR(32700),
	"Interests24" VARCHAR(32700),
	"Interests25" VARCHAR(32700),
	"Interests26" VARCHAR(32700),
	"Interests27" VARCHAR(32700),
	"Interests28" VARCHAR(32700),
	"Interests29" VARCHAR(32700),
	"Interests30" VARCHAR(32700),
	"Interests31" VARCHAR(32700),
	"Interests32" VARCHAR(32700),
	"Interests33" VARCHAR(32700),
	"Interests34" VARCHAR(32700),
	"Interests35" VARCHAR(32700),
	"Interests36" VARCHAR(32700),
	"Interests37" VARCHAR(32700),
	"Interests38" VARCHAR(32700),
	"Interests39" VARCHAR(32700),
	"Interests40" VARCHAR(32700),
	"CounselorEmail" VARCHAR(32700),
	"EvaluationTeachersName" VARCHAR(32700),
	"EvaluationTeachersEmail" VARCHAR(32700),
	"EvaluationTeachersSubjectTaught" VARCHAR(32700),
	"HS1CEEBCode" VARCHAR(32700),
	"HS1SchoolAttended" VARCHAR(32700),
	"HS1Address1" VARCHAR(32700),
	"HS1Address2" VARCHAR(32700),
	"HS1City" VARCHAR(32700),
	"HS1State" VARCHAR(32700),
	"HS1Zip" VARCHAR(32700),
	"HS1Country" VARCHAR(32700),
	"HS1GradDate" VARCHAR(32700),
	"HS1Rater" VARCHAR(32700),
	"HS1MarketCode" VARCHAR(32700),
	"HS2CEEBCode" VARCHAR(32700),
	"HS2SchoolAttended" VARCHAR(32700),
	"HS2Address1" VARCHAR(32700),
	"HS2City" VARCHAR(32700),
	"HS2State" VARCHAR(32700),
	"HS2Zip" VARCHAR(32700),
	"College1CEEBCode" VARCHAR(32700),
	"College1SchoolAttended" VARCHAR(32700),
	"College1Address2" VARCHAR(32700),
	"College1City" VARCHAR(32700),
	"College1State" VARCHAR(32700),
	"College1Zip" VARCHAR(32700),
	"HighestSATEBRWConcorded" VARCHAR(32700),
	"HighestSATMathConcorded" VARCHAR(32700),
	"HighestSATCombinedEBRWMathConcorded" VARCHAR(32700),
	"HighestSATCombinedDateEBRWMathConcorded" VARCHAR(32700),
	"HighestSATCriticalReadingOldTestOnly" VARCHAR(32700),
	"HighestSATMathOldTestOnly" VARCHAR(32700),
	"HighestSATWritingOldTestOnly" VARCHAR(32700),
	"HighestSATCombinedMathandCROldTestOnly" VARCHAR(32700),
	"HighestSATCombinedDateMathandCROldTest" VARCHAR(32700),
	"HighestSATEBRWNewTestOnly" VARCHAR(32700),
	"HighestSATMathNewTestOnly" VARCHAR(32700),
	"HighestSATCombinedEBRMathNewTestOnly" VARCHAR(32700),
	"HighestSATCombinedDateEBRMathNewTestOnly" VARCHAR(32700),
	"HighestACTComposite" VARCHAR(32700),
	"HighestACTMath" VARCHAR(32700),
	"HighestACTCompositeDate" VARCHAR(32700),
	"HighestTOEFL" VARCHAR(32700),
	"HighestTOEFLDate" VARCHAR(32700),
	"HighestTOEFLTestType" VARCHAR(32700),
	"HighestTOEFLListening" VARCHAR(32700),
	"HighestTOEFLStructureWriting" VARCHAR(32700),
	"HighestTOEFLSpeaking" VARCHAR(32700),
	"HighestTOEFLReading" VARCHAR(32700),
	"HighestTOEFLEssay" VARCHAR(32700),
	"HighestIELTS" VARCHAR(32700),
	"HighestIELTSDate" VARCHAR(32700),
	"HighestIELTSListening" VARCHAR(32700),
	"HighestIELTSReading" VARCHAR(32700),
	"HighestIELTSWriting" VARCHAR(32700),
	"HighestIELTSSpeaking" VARCHAR(32700),
	"Test1Subject" VARCHAR(32700),
	"Test1Score" VARCHAR(32700),
	"Test1NatRefPercentile" VARCHAR(32700),
	"Test1USTestTakerPercentile" VARCHAR(32700),
	"Test1DateTaken" VARCHAR(32700),
	"Test1GradeLevel" VARCHAR(32700),
	"Test2Subject" VARCHAR(32700),
	"Test2Score" VARCHAR(32700),
	"Test2NatRefPercentile" VARCHAR(32700),
	"Test2USTestTakerPercentile" VARCHAR(32700),
	"Test2DateTaken" VARCHAR(32700),
	"Test2GradeLevel" VARCHAR(32700),
	"Test3Subject" VARCHAR(32700),
	"Test3Score" VARCHAR(32700),
	"Test3NatRefPercentile" VARCHAR(32700),
	"Test3USTestTakerPercentile" VARCHAR(32700),
	"Test3DateTaken" VARCHAR(32700),
	"Test3GradeLevel" VARCHAR(32700),
	"Test4Subject" VARCHAR(32700),
	"Test4Score" VARCHAR(32700),
	"Test4NatRefPercentile" VARCHAR(32700),
	"Test4USTestTakerPercentile" VARCHAR(32700),
	"Test4DateTaken" VARCHAR(32700),
	"Test4GradeLevel" VARCHAR(32700),
	"Test5Subject" VARCHAR(32700),
	"Test5Score" VARCHAR(32700),
	"Test5NatRefPercentile" VARCHAR(32700),
	"Test5USTestTakerPercentile" VARCHAR(32700),
	"Test5DateTaken" VARCHAR(32700),
	"Test5GradeLevel" VARCHAR(32700),
	"Test6Subject" VARCHAR(32700),
	"Test6Score" VARCHAR(32700),
	"Test6NatRefPercentile" VARCHAR(32700),
	"Test6USTestTakerPercentile" VARCHAR(32700),
	"Test6DateTaken" VARCHAR(32700),
	"Test6GradeLevel" VARCHAR(32700),
	"Test7Subject" VARCHAR(32700),
	"Test7Score" VARCHAR(32700),
	"Test7NatRefPercentile" VARCHAR(32700),
	"Test7USTestTakerPercentile" VARCHAR(32700),
	"Test7DateTaken" VARCHAR(32700),
	"Test7GradeLevel" VARCHAR(32700),
	"Test8Subject" VARCHAR(32700),
	"Test8Score" VARCHAR(32700),
	"Test8NatRefPercentile" VARCHAR(32700),
	"Test8USTestTakerPercentile" VARCHAR(32700),
	"Test8DateTaken" VARCHAR(32700),
	"Test8GradeLevel" VARCHAR(32700),
	"Test9Subject" VARCHAR(32700),
	"Test9Score" VARCHAR(32700),
	"Test9NatRefPercentile" VARCHAR(32700),
	"Test9DateTaken" VARCHAR(32700),
	"Test9GradeLevel" VARCHAR(32700),
	"Test10Subject" VARCHAR(32700),
	"Test10Score" VARCHAR(32700),
	"Test10NatRefPercentile" VARCHAR(32700),
	"Test10DateTaken" VARCHAR(32700),
	"Test10GradeLevel" VARCHAR(32700),
	"Sat2Test1Type" VARCHAR(32700),
	"SAT2Test1Score" VARCHAR(32700),
	"SAT2Test1DateTaken" VARCHAR(32700),
	"SAT2Test1GradeLevel" VARCHAR(32700),
	"SAT2Test2Type" VARCHAR(32700),
	"SAT2Test2Score" VARCHAR(32700),
	"SAT2Test2DateTaken" VARCHAR(32700),
	"SAT2Test2GradeLevel" VARCHAR(32700),
	"SAT2Test3Type" VARCHAR(32700),
	"SAT2Test3Score" VARCHAR(32700),
	"SAT2Test3DateTaken" VARCHAR(32700),
	"SAT2Test3GradeLevel" VARCHAR(32700),
	"SAT2Test4Type" VARCHAR(32700),
	"SAT2Test4Score" VARCHAR(32700),
	"SAT2Test4DateTaken" VARCHAR(32700),
	"SAT2Test4GradeLevel" VARCHAR(32700),
	"SAT2Test5Type" VARCHAR(32700),
	"SAT2Test5Score" VARCHAR(32700),
	"SAT2Test5DateTaken" VARCHAR(32700),
	"SAT2Test5GradeLevel" VARCHAR(32700),
	"SAT2Test6Type" VARCHAR(32700),
	"SAT2Test6Score" VARCHAR(32700),
	"SAT2Test6DateTaken" VARCHAR(32700),
	"SAT2Test6GradeLevel" VARCHAR(32700),
	"SAT2Test7Type" VARCHAR(32700),
	"SAT2Test7Score" VARCHAR(32700),
	"SAT2Test7DateTaken" VARCHAR(32700),
	"SAT2Test7GradeLevel" VARCHAR(32700),
	"SAT2Test8Type" VARCHAR(32700),
	"SAT2Test8Score" VARCHAR(32700),
	"SAT2Test8DateTaken" VARCHAR(32700),
	"SAT2Test8GradeLevel" VARCHAR(32700),
	"SAT2Test9Type" VARCHAR(32700),
	"SAT2Test9Score" VARCHAR(32700),
	"SAT2Test9DateTaken" VARCHAR(32700),
	"SAT2Test9GradeLevel" VARCHAR(32700),
	"WritingTest1Score" VARCHAR(32700),
	"WritingTest1Date" VARCHAR(32700),
	"WritingTest1Grade" VARCHAR(32700),
	"WritingTest1Subscore1" VARCHAR(32700),
	"WritingTest1Subscore2" VARCHAR(32700),
	"WritingTest1EssayID" VARCHAR(32700),
	"WritingTest2Score" VARCHAR(32700),
	"WritingTest2Date" VARCHAR(32700),
	"WritingTest2Grade" VARCHAR(32700),
	"WritingTest2Subscore1" VARCHAR(32700),
	"WritingTest2Subscore2" VARCHAR(32700),
	"WritingTest2EssayID" VARCHAR(32700),
	"WritingTest3Score" VARCHAR(32700),
	"WritingTest3Date" VARCHAR(32700),
	"WritingTest3Grade" VARCHAR(32700),
	"WritingTest3Subscore1" VARCHAR(32700),
	"WritingTest3Subscore2" VARCHAR(32700),
	"WritingTest3EssayID" VARCHAR(32700),
	"WritingTest4Score" VARCHAR(32700),
	"WritingTest4Date" VARCHAR(32700),
	"WritingTest4Grade" VARCHAR(32700),
	"WritingTest4Subscore1" VARCHAR(32700),
	"WritingTest4Subscore2" VARCHAR(32700),
	"WritingTest4EssayID" VARCHAR(32700),
	"WritingTest5Score" VARCHAR(32700),
	"WritingTest5Date" VARCHAR(32700),
	"WritingTest5Grade" VARCHAR(32700),
	"WritingTest5Subscore1" VARCHAR(32700),
	"WritingTest5Subscore2" VARCHAR(32700),
	"WritingTest5EssayID" VARCHAR(32700),
	"TOEFL1TestType" VARCHAR(32700),
	"TOEFL1TestDate" VARCHAR(32700),
	"TOEFL1ListenScore" VARCHAR(32700),
	"TOEFL1StructureWritingScore" VARCHAR(32700),
	"TOEFL1Speaking" VARCHAR(32700),
	"TOEFL1ReadingScore" VARCHAR(32700),
	"TOEFL1EssayRating" VARCHAR(32700),
	"TOEFL1TotalScore" VARCHAR(32700),
	"TOEFL2TestType" VARCHAR(32700),
	"TOEFL2TestDate" VARCHAR(32700),
	"TOEFL2ListenScore" VARCHAR(32700),
	"TOEFL2StructureWritingScore" VARCHAR(32700),
	"TOEFL2Speaking" VARCHAR(32700),
	"TOEFL2ReadingScore" VARCHAR(32700),
	"TOEFL2TotalScore" VARCHAR(32700),
	"TOEFL3TestType" VARCHAR(32700),
	"TOEFL3TestDate" VARCHAR(32700),
	"TOEFL3ListenScore" VARCHAR(32700),
	"TOEFL3StructureWritingScore" VARCHAR(32700),
	"TOEFL3Speaking" VARCHAR(32700),
	"TOEFL3ReadingScore" VARCHAR(32700),
	"TOEFL3TotalScore" VARCHAR(32700),
	"Test1Subject1" VARCHAR(32700),
	"Test1Score1" VARCHAR(32700),
	"Test1DateTaken1" VARCHAR(32700),
	"Test1GradeLevel1" VARCHAR(32700),
	"Test2Subject1" VARCHAR(32700),
	"Test2Score1" VARCHAR(32700),
	"Test2DateTaken1" VARCHAR(32700),
	"Test2GradeLevel1" VARCHAR(32700),
	"Test3Subject1" VARCHAR(32700),
	"Test3Score1" VARCHAR(32700),
	"Test3DateTaken1" VARCHAR(32700),
	"Test3GradeLevel1" VARCHAR(32700),
	"Test4Subject1" VARCHAR(32700),
	"Test4Score1" VARCHAR(32700),
	"Test4DateTaken1" VARCHAR(32700),
	"Test4GradeLevel1" VARCHAR(32700),
	"Test5Subject1" VARCHAR(32700),
	"Test5Score1" VARCHAR(32700),
	"Test5DateTaken1" VARCHAR(32700),
	"Test5GradeLevel1" VARCHAR(32700),
	"Test6Subject1" VARCHAR(32700),
	"Test6Score1" VARCHAR(32700),
	"Test6DateTaken1" VARCHAR(32700),
	"Test6GradeLevel1" VARCHAR(32700),
	"Test7Subject1" VARCHAR(32700),
	"Test7Score1" VARCHAR(32700),
	"Test7DateTaken1" VARCHAR(32700),
	"Test7GradeLevel1" VARCHAR(32700),
	"Test8Subject1" VARCHAR(32700),
	"Test8Score1" VARCHAR(32700),
	"Test8DateTaken1" VARCHAR(32700),
	"Test8GradeLevel1" VARCHAR(32700),
	"Test9Subject1" VARCHAR(32700),
	"Test9Score1" VARCHAR(32700),
	"Test9DateTaken1" VARCHAR(32700),
	"Test9GradeLevel1" VARCHAR(32700),
	"Test10Subject1" VARCHAR(32700),
	"Test10Score1" VARCHAR(32700),
	"Test10DateTaken1" VARCHAR(32700),
	"Test10GradeLevel1" VARCHAR(32700),
	"Test11Subject1" VARCHAR(32700),
	"Test11Score1" VARCHAR(32700),
	"Test11DateTaken1" VARCHAR(32700),
	"Test11GradeLevel1" VARCHAR(32700),
	"Test12Subject1" VARCHAR(32700),
	"Test12Score1" VARCHAR(32700),
	"Test12DateTaken1" VARCHAR(32700),
	"Test12GradeLevel1" VARCHAR(32700),
	"Test13Subject1" VARCHAR(32700),
	"Test13Score1" VARCHAR(32700),
	"Test13DateTaken1" VARCHAR(32700),
	"Test13GradeLevel1" VARCHAR(32700),
	"Test14Subject1" VARCHAR(32700),
	"Test14Score1" VARCHAR(32700),
	"Test14DateTaken1" VARCHAR(32700),
	"Test14GradeLevel1" VARCHAR(32700),
	"Test15Subject1" VARCHAR(32700),
	"Test15Score1" VARCHAR(32700),
	"Test15DateTaken1" VARCHAR(32700),
	"Test15GradeLevel1" VARCHAR(32700),
	"Test16Subject1" VARCHAR(32700),
	"Test16Score1" VARCHAR(32700),
	"Test16DateTaken1" VARCHAR(32700),
	"Test16GradeLevel1" VARCHAR(32700),
	"Test17Subject1" VARCHAR(32700),
	"Test17Score1" VARCHAR(32700),
	"Test17DateTaken1" VARCHAR(32700),
	"Test17GradeLevel1" VARCHAR(32700),
	"Test18Subject1" VARCHAR(32700),
	"Test18Score1" VARCHAR(32700),
	"Test18DateTaken1" VARCHAR(32700),
	"Test18GradeLevel1" VARCHAR(32700),
	"Test19Subject1" VARCHAR(32700),
	"Test19Score1" VARCHAR(32700),
	"Test19DateTaken1" VARCHAR(32700),
	"Test19GradeLevel1" VARCHAR(32700),
	"Test20Subject1" VARCHAR(32700),
	"Test20Score1" VARCHAR(32700),
	"Test20DateTaken1" VARCHAR(32700),
	"Test20GradeLevel1" VARCHAR(32700),
	"Test21Subject" VARCHAR(32700),
	"Test21Score" VARCHAR(32700),
	"Test21DateTaken" VARCHAR(32700),
	"Test21GradeLevel" VARCHAR(32700),
	"Test22Subject" VARCHAR(32700),
	"Test22Score" VARCHAR(32700),
	"Test22DateTaken" VARCHAR(32700),
	"Test22GradeLevel" VARCHAR(32700),
	"Test23Subject" VARCHAR(32700),
	"Test23Score" VARCHAR(32700),
	"Test23DateTaken" VARCHAR(32700),
	"Test23GradeLevel" VARCHAR(32700),
	"Test24Subject" VARCHAR(32700),
	"Test24Score" VARCHAR(32700),
	"Test24DateTaken" VARCHAR(32700),
	"Test24GradeLevel" VARCHAR(32700),
	"Test25Subject" VARCHAR(32700),
	"Test25Score" VARCHAR(32700),
	"Test25DateTaken" VARCHAR(32700),
	"Test25GradeLevel" VARCHAR(32700),
	"Test26Subject" VARCHAR(32700),
	"Test26Score" VARCHAR(32700),
	"Test26DateTaken" VARCHAR(32700),
	"Test26GradeLevel" VARCHAR(32700),
	"Test27Subject" VARCHAR(32700),
	"Test27Score" VARCHAR(32700),
	"Test27DateTaken" VARCHAR(32700),
	"Test27GradeLevel" VARCHAR(32700),
	"Test28Subject" VARCHAR(32700),
	"Test28Score" VARCHAR(32700),
	"Test28DateTaken" VARCHAR(32700),
	"Test28GradeLevel" VARCHAR(32700),
	"Test29Subject" VARCHAR(32700),
	"Test29Score" VARCHAR(32700),
	"Test29DateTaken" VARCHAR(32700),
	"Test29GradeLevel" VARCHAR(32700),
	"Test30Subject" VARCHAR(32700),
	"Test30Score" VARCHAR(32700),
	"Test30DateTaken" VARCHAR(32700),
	"Test30GradeLevel" VARCHAR(32700),
	"IELTSListening" VARCHAR(32700),
	"IELTSReading" VARCHAR(32700),
	"IELTSWriting" VARCHAR(32700),
	"IELTSSpeaking" VARCHAR(32700),
	"IELTSScore" VARCHAR(32700),
	"IELTSDateTaken" VARCHAR(32700),
	"Rater1Total" VARCHAR(32700),
	"Rater2Total" VARCHAR(32700),
	"RaterSpecialTotal" VARCHAR(32700),
	"Rater1RecommendedDecision" VARCHAR(32700),
	"Rater2RecommendedDecision" VARCHAR(32700),
	"RaterSpecialRecommendedDecision" VARCHAR(32700),
	"rank" VARCHAR(32700),
	"sizeofclass" VARCHAR(32700),
	"percentileinclass" VARCHAR(32700),
	GPA VARCHAR(32700),
	"OtherClassRankDecile" VARCHAR(32700),
	"P1Prefix" VARCHAR(32700),
	"P1LastName" VARCHAR(32700),
	"P1FirstName" VARCHAR(32700),
	"P1MiddleName" VARCHAR(32700),
	"P1Namesuffix" VARCHAR(32700),
	"P1Addressline1" VARCHAR(32700),
	"P1Addressline2" VARCHAR(32700),
	"P1City" VARCHAR(32700),
	"P1State" VARCHAR(32700),
	"P1Zip" VARCHAR(32700),
	"P1Country" VARCHAR(32700),
	"P1SameAddress" VARCHAR(32700),
	"P1HomePhone" VARCHAR(32700),
	"P1WorkPhone" VARCHAR(32700),
	"P1CellPhone" VARCHAR(32700),
	"P1Fax" VARCHAR(32700),
	"P1Email" VARCHAR(32700),
	"P1Relationship" VARCHAR(32700),
	"P1Living" VARCHAR(32700),
	"P1BirthCountry" VARCHAR(32700),
	"P1Occupation" VARCHAR(32700),
	"P1PositionTitle" VARCHAR(32700),
	"P1Employer" VARCHAR(32700),
	"P1EmployerCEEBCode" VARCHAR(32700),
	"P1CollegeAttended" VARCHAR(32700),
	"P1CollegeCEEBCode" VARCHAR(32700),
	"P1CollegeDegree" VARCHAR(32700),
	"P1CollegeDegreeYear" VARCHAR(32700),
	"P1GradSchool" VARCHAR(32700),
	"P1GradSchoolCEEBCode" VARCHAR(32700),
	"P1GradSchoolDegree" VARCHAR(32700),
	"P1GradSchoolDegreeYear" VARCHAR(32700),
	"P1Gender" VARCHAR(32700),
	"P1MaritalStatus" VARCHAR(32700),
	"P1DivorceDate" VARCHAR(32700),
	P1FWID VARCHAR(32700),
	"P1CommonAppParent" VARCHAR(32700),
	"P2Prefix" VARCHAR(32700),
	"P2LastName" VARCHAR(32700),
	"P2FirstName" VARCHAR(32700),
	"P2MiddleName" VARCHAR(32700),
	"P2Namesuffix" VARCHAR(32700),
	"P2Addressline1" VARCHAR(32700),
	"P2Addressline2" VARCHAR(32700),
	"P2City" VARCHAR(32700),
	"P2State" VARCHAR(32700),
	"P2Zip" VARCHAR(32700),
	"P2Country" VARCHAR(32700),
	"P2SameAddress" VARCHAR(32700),
	"P2HomePhone" VARCHAR(32700),
	"P2WorkPhone" VARCHAR(32700),
	"P2CellPhone" VARCHAR(32700),
	"P2Email" VARCHAR(32700),
	"P2Relationship" VARCHAR(32700),
	"P2Living" VARCHAR(32700),
	"P2DeceasedDate" VARCHAR(32700),
	"P2BirthCountry" VARCHAR(32700),
	"P2Occupation" VARCHAR(32700),
	"P2PositionTitle" VARCHAR(32700),
	"P2Employer" VARCHAR(32700),
	"P2EmployerCEEBCode" VARCHAR(32700),
	"P2CollegeAttended" VARCHAR(32700),
	"P2CollegeCEEBCode" VARCHAR(32700),
	"P2CollegeDegree" VARCHAR(32700),
	"P2CollegeDegreeYear" VARCHAR(32700),
	"P2GradSchool" VARCHAR(32700),
	"P2GradSchoolCEEBCode" VARCHAR(32700),
	"P2GradSchoolDegree" VARCHAR(32700),
	"P2GradSchoolDegreeYear" VARCHAR(32700),
	"P2Gender" VARCHAR(32700),
	"P2MaritalStatus" VARCHAR(32700),
	"P2DivorceDate" VARCHAR(32700),
	P2FWID VARCHAR(32700),
	"P2CommonAppParent" VARCHAR(32700),
	"P3Prefix" VARCHAR(32700),
	"P3LastName" VARCHAR(32700),
	"P3FirstName" VARCHAR(32700),
	"P3MiddleName" VARCHAR(32700),
	"P3Namesuffix" VARCHAR(32700),
	"P3Addressline1" VARCHAR(32700),
	"P3Addressline2" VARCHAR(32700),
	"P3City" VARCHAR(32700),
	"P3State" VARCHAR(32700),
	"P3Zip" VARCHAR(32700),
	"P3Country" VARCHAR(32700),
	"P3SameAddress" VARCHAR(32700),
	"P3HomePhone" VARCHAR(32700),
	"P3WorkPhone" VARCHAR(32700),
	"P3CellPhone" VARCHAR(32700),
	"P3Email" VARCHAR(32700),
	"P3Relationship" VARCHAR(32700),
	"P3BirthCountry" VARCHAR(32700),
	"P3Occupation" VARCHAR(32700),
	"P3PositionTitle" VARCHAR(32700),
	"P3Employer" VARCHAR(32700),
	"P3CollegeAttended" VARCHAR(32700),
	"P3CollegeCEEBCode" VARCHAR(32700),
	"P3CollegeDegree" VARCHAR(32700),
	"P3CollegeDegreeYear" VARCHAR(32700),
	"P3GradSchool" VARCHAR(32700),
	"P3GradSchoolCEEBCode" VARCHAR(32700),
	"P3GradSchoolDegree" VARCHAR(32700),
	"P3GradSchoolDegreeYear" VARCHAR(32700),
	"P3Gender" VARCHAR(32700),
	"P3MaritalStatus" VARCHAR(32700),
	P3FWID VARCHAR(32700),
	"P3CommonAppParent" VARCHAR(32700),
	"P4Prefix" VARCHAR(32700),
	"P4LastName" VARCHAR(32700),
	"P4FirstName" VARCHAR(32700),
	"P4MiddleName" VARCHAR(32700),
	"P4Addressline1" VARCHAR(32700),
	"P4City" VARCHAR(32700),
	"P4State" VARCHAR(32700),
	"P4Zip" VARCHAR(32700),
	"P4Country" VARCHAR(32700),
	"P4SameAddress" VARCHAR(32700),
	"P4CellPhone" VARCHAR(32700),
	"P4Email" VARCHAR(32700),
	"P4Relationship" VARCHAR(32700),
	"P4BirthCountry" VARCHAR(32700),
	"P4Occupation" VARCHAR(32700),
	"P4PositionTitle" VARCHAR(32700),
	"P4Employer" VARCHAR(32700),
	"P4CollegeAttended" VARCHAR(32700),
	"P4CollegeCEEBCode" VARCHAR(32700),
	"P4CollegeDegree" VARCHAR(32700),
	"P4CollegeDegreeYear" VARCHAR(32700),
	"P4Gender" VARCHAR(32700),
	P4FWID VARCHAR(32700),
	"P4CommonAppParent" VARCHAR(32700),
	"P5Prefix" VARCHAR(32700),
	"P5LastName" VARCHAR(32700),
	"P5FirstName" VARCHAR(32700),
	"P5MiddleName" VARCHAR(32700),
	"P5Addressline1" VARCHAR(32700),
	"P5City" VARCHAR(32700),
	"P5State" VARCHAR(32700),
	"P5Zip" VARCHAR(32700),
	"P5Country" VARCHAR(32700),
	"P5SameAddress" VARCHAR(32700),
	"P5HomePhone" VARCHAR(32700),
	"P5Email" VARCHAR(32700),
	"P5Relationship" VARCHAR(32700),
	"P5BirthCountry" VARCHAR(32700),
	"P5Occupation" VARCHAR(32700),
	"P5PositionTitle" VARCHAR(32700),
	"P5Employer" VARCHAR(32700),
	"P5GradSchool" VARCHAR(32700),
	"P5GradSchoolCEEBCode" VARCHAR(32700),
	"P5Gender" VARCHAR(32700),
	"P5MaritalStatus" VARCHAR(32700),
	P5FWID VARCHAR(32700),
	"P5CommonAppParent" VARCHAR(32700)
);
create or replace TABLE SAMPLECSVFILE (
	INDICATOR VARCHAR(32700),
	"IndicatorText" VARCHAR(32700),
	REPORTER VARCHAR(32700),
	"Reporting country" VARCHAR(32700),
	FLOW VARCHAR(32700),
	"FlowText" VARCHAR(32700),
	PARTNER VARCHAR(32700),
	"Partner country or zone" VARCHAR(32700),
	SIZECLASS VARCHAR(32700),
	"Size class" VARCHAR(32700),
	TIME VARCHAR(32700),
	"Year" VARCHAR(32700),
	"Value" VARCHAR(32700)
);
create or replace TABLE TROWE_DEMO01 (
	"first_name" VARCHAR(32700),
	"last_name" VARCHAR(32700),
	"full_name" VARCHAR(32700),
	"city" VARCHAR(32700),
	"state" VARCHAR(32700),
	"street_address" VARCHAR(32700)
);
create or replace TABLE TROW_DEMO_01 (
	INDICATOR_TEXT VARCHAR(32700),
	PARTNER_COUNTRY VARCHAR(32700),
	REPORTING_COUNTRY VARCHAR(32700),
	VALUE VARCHAR(32700)
);
create or replace TABLE TRP_ONPREM_TO_SF (
	"sku" VARCHAR(32700),
	"name" VARCHAR(32700),
	"type" VARCHAR(32700),
	"price" VARCHAR(32700),
	"upc" VARCHAR(32700),
	"shipping" VARCHAR(32700),
	"description" VARCHAR(32700),
	"manufacturer" VARCHAR(32700),
	"model" VARCHAR(32700),
	"url" VARCHAR(32700),
	"image" VARCHAR(32700)
);
create or replace schema EBARN;

create or replace TABLE AE_CUSTOMERS (
	"FirstName" VARCHAR(32700),
	"LastName" VARCHAR(32700),
	"MailingCountry" VARCHAR(32700),
	"MailingStreet" VARCHAR(32700),
	"MailingCity" VARCHAR(32700),
	"MailingPostalCode" VARCHAR(32700),
	"OtherState" VARCHAR(32700)
);
create or replace TABLE CASE_TEST_1 (
	"id" VARCHAR(32700),
	"email" VARCHAR(32700),
	"foo" VARCHAR(32700)
);
create or replace TABLE CASE_TEST_2 (
	EMAIL VARCHAR(32700),
	FOO VARCHAR(32700),
	ID VARCHAR(32700)
);
create or replace TABLE DELETE_6AV (
	"Client" VARCHAR(32700),
	"id" VARCHAR(32700)
);
create or replace TABLE DELETE_ME_1 (
	EMAIL VARCHAR(32700),
	FIRST_NAME VARCHAR(32700),
	GENDER VARCHAR(32700),
	IP_ADDRESS VARCHAR(32700),
	LAST_NAME VARCHAR(32700)
);
create or replace TABLE DELETE_ME_10 (
	EMAIL VARCHAR(32700),
	FIRST_NAME VARCHAR(32700),
	GENDER VARCHAR(32700),
	IP_ADDRESS VARCHAR(32700),
	LAST_NAME VARCHAR(32700),
	NOTE VARCHAR(32700),
	AUDIT_DATE VARCHAR(32700),
	TITLE VARCHAR(32700)
);
create or replace TABLE DELETE_ME_10_1 (
	EMAIL VARCHAR(32700),
	FIRST_NAME VARCHAR(32700),
	GENDER VARCHAR(32700),
	IP_ADDRESS VARCHAR(32700),
	LAST_NAME VARCHAR(32700),
	NOTE VARCHAR(32700),
	AUDIT_DATE VARCHAR(32700),
	TITLE VARCHAR(32700)
);
create or replace TABLE DELETE_ME_2 (
	EMAIL VARCHAR(32700),
	FIRST_NAME VARCHAR(32700),
	GENDER VARCHAR(32700),
	IP_ADDRESS VARCHAR(32700),
	LAST_NAME VARCHAR(32700),
	"note" VARCHAR(32700)
);
create or replace TABLE DELETE_ME_3 (
	EMAIL VARCHAR(32700),
	FIRST_NAME VARCHAR(32700),
	GENDER VARCHAR(32700),
	IP_ADDRESS VARCHAR(32700),
	LAST_NAME VARCHAR(32700),
	"note" VARCHAR(32700),
	"audit_date" VARCHAR(32700)
);
create or replace TABLE DELETE_ME_4 (
	EMAIL VARCHAR(32700),
	FIRST_NAME VARCHAR(32700),
	GENDER VARCHAR(32700),
	IP_ADDRESS VARCHAR(32700),
	LAST_NAME VARCHAR(32700),
	"note" VARCHAR(32700),
	"audit_date" VARCHAR(32700)
);
create or replace TABLE DELETE_ME_5 (
	FIRST_NAME VARCHAR(32700),
	LAST_NAME VARCHAR(32700),
	"audit_date" VARCHAR(32700),
	GENDER VARCHAR(32700),
	"note" VARCHAR(32700),
	IP_ADDRESS VARCHAR(32700),
	EMAIL VARCHAR(32700)
);
create or replace TABLE DELETE_ME_6 (
	FIRST_NAME VARCHAR(32700),
	LAST_NAME VARCHAR(32700),
	AUDIT_DATE VARCHAR(32700),
	GENDER VARCHAR(32700),
	NOTE VARCHAR(32700),
	IP_ADDRESS VARCHAR(32700),
	EMAIL VARCHAR(32700)
);
create or replace TABLE DELETE_ME_7 (
	FIRST_NAME VARCHAR(32700),
	LAST_NAME VARCHAR(32700),
	AUDIT_DATE VARCHAR(32700),
	GENDER VARCHAR(32700),
	NOTE VARCHAR(32700),
	IP_ADDRESS VARCHAR(32700),
	EMAIL VARCHAR(32700),
	TITLE VARCHAR(32700)
);
create or replace TABLE DELETE_ME_8 (
	EMAIL VARCHAR(32700),
	FIRST_NAME VARCHAR(32700),
	GENDER VARCHAR(32700),
	IP_ADDRESS VARCHAR(32700),
	LAST_NAME VARCHAR(32700),
	"note" VARCHAR(32700),
	"audit_date" VARCHAR(32700),
	"title" VARCHAR(32700)
);
create or replace TABLE DELETE_ME_9 (
	EMAIL VARCHAR(32700),
	FIRST_NAME VARCHAR(32700),
	GENDER VARCHAR(32700),
	IP_ADDRESS VARCHAR(32700),
	LAST_NAME VARCHAR(32700),
	NOTE VARCHAR(32700),
	AUDIT_DATE VARCHAR(32700),
	TITLE VARCHAR(32700)
);
create or replace TABLE DELETE_ME_AV (
	"Name" VARCHAR(32700)
);
create or replace TABLE DELETE_ME_AV1 (
	"accountname" VARCHAR(32700),
	"clientid" VARCHAR(32700)
);
create or replace TABLE DELETE_ME_AV2_TEST (
	ID VARCHAR(32700)
);
create or replace TABLE DELETE_ME_AV2_TEST2 (
	"Client" VARCHAR(32700),
	"id" VARCHAR(32700)
);
create or replace TABLE DELETE_ME_AV2_TEST_953 (
	"accountname" VARCHAR(32700),
	"clientid" VARCHAR(32700)
);
create or replace TABLE DELETE_ME_AV2_TEST_953_1 (
	"accountname" VARCHAR(32700),
	"clientid" VARCHAR(32700)
);
create or replace TABLE DELETE_ME_AV_1 (
	"Name" VARCHAR(32700)
);
create or replace TABLE EB_BULK_LOAD (
	ID NUMBER(38,0),
	FIRST_NAME VARCHAR(16777216),
	LAST_NAME VARCHAR(16777216),
	EMAIL VARCHAR(16777216),
	GENDER VARCHAR(16777216),
	IP_ADDRESS VARCHAR(16777216)
);
create or replace TABLE EB_BULK_LOAD_A (
	"account_name" VARCHAR(32700),
	"adj_code" VARCHAR(32700),
	"adj_sequence" VARCHAR(32700),
	"adjustment_amt" VARCHAR(32700),
	"adjustment_date" VARCHAR(32700),
	"adjustment_type" VARCHAR(32700),
	"aud_rec_id" VARCHAR(32700),
	"audit_date" VARCHAR(32700)
);
create or replace TABLE EB_BULK_LOAD_A2 (
	"account_name" VARCHAR(32700),
	"adj_code" VARCHAR(32700),
	"adj_sequence" VARCHAR(32700),
	"adjustment_amt" VARCHAR(32700),
	"adjustment_date" VARCHAR(32700),
	"adjustment_type" VARCHAR(32700),
	"aud_rec_id" VARCHAR(32700)
);
create or replace TABLE EB_BULK_LOAD_AB (
	"account_name" VARCHAR(32700),
	"adj_code" VARCHAR(32700),
	"adj_sequence" VARCHAR(32700),
	"adjustment_amt" VARCHAR(32700),
	"adjustment_date" VARCHAR(32700),
	"adjustment_type" VARCHAR(32700),
	"aud_rec_id" VARCHAR(32700)
);
create or replace TABLE EB_BULK_LOAD_MN (
	FIRST_NAME VARCHAR(32700),
	LAST_NAME VARCHAR(32700),
	GENDER VARCHAR(32700),
	IP_ADDRESS VARCHAR(32700),
	EMAIL VARCHAR(32700),
	ID VARCHAR(32700)
);
create or replace TABLE MH_TEST_BULK_LOAD1 (
	"client_id" VARCHAR(32700),
	"account_name" VARCHAR(32700),
	"adj_sequence" VARCHAR(32700),
	"deposit_id" VARCHAR(32700),
	"deposit_batch_id" VARCHAR(32700),
	"deposit_batch_seq" VARCHAR(32700),
	"adj_code" VARCHAR(32700),
	"payment_sequence" VARCHAR(32700),
	"user_id" VARCHAR(32700),
	"note" VARCHAR(32700),
	"adjustment_date" VARCHAR(32700),
	"adjustment_amt" VARCHAR(32700),
	"invoice_date" VARCHAR(32700),
	"retro_invoice_date" VARCHAR(32700),
	"revenue_accn_id" VARCHAR(32700),
	"posted" VARCHAR(32700),
	"print_on_stmt" VARCHAR(32700),
	"aud_rec_id" VARCHAR(32700),
	"x_adjustment_code" VARCHAR(32700),
	"x_client_id" VARCHAR(32700),
	"audit_date" VARCHAR(32700),
	"adjustment_type" VARCHAR(32700)
);
create or replace TABLE SRC (
	K NUMBER(38,0),
	V NUMBER(38,0)
);
create or replace TABLE SWAT953_AV (
	"Vendor" VARCHAR(32700),
	"Category" VARCHAR(32700),
	"Preferred" VARCHAR(32700),
	"Managed" VARCHAR(32700),
	"Segmentation" VARCHAR(32700),
	"Delete" VARCHAR(32700)
);
create or replace TABLE TARGET (
	K NUMBER(38,0),
	V NUMBER(38,0)
);
create or replace TABLE TARGET_ORIG (
	K NUMBER(38,0),
	V NUMBER(38,0)
);
create or replace TABLE TESTING (
	"msg" VARCHAR(32700),
	"num" VARCHAR(32700)
);
create or replace TABLE TEST_WITH_TIMESTAMP (
	ID NUMBER(38,0),
	TIMESTAMP TIMESTAMP_NTZ(9)
)COMMENT='table with a timestamp to test bulk load'
;
create or replace schema FINANCE;

create or replace TABLE ACCOUNT (
	"account_id" VARCHAR(4000),
	"district_id" VARCHAR(4000),
	"frequency" VARCHAR(4000),
	"date" VARCHAR(4000)
);
create or replace TABLE CARD (
	"card_id" VARCHAR(4000),
	"disp_id" VARCHAR(4000),
	"type" VARCHAR(4000),
	"issued" VARCHAR(4000)
);
create or replace TABLE CLIENT (
	"client_id" VARCHAR(4000),
	"birth_number" VARCHAR(4000),
	"district_id" VARCHAR(4000)
);
create or replace TABLE DISP (
	"disp_id" VARCHAR(4000),
	"client_id" VARCHAR(4000),
	"account_id" VARCHAR(4000),
	"type" VARCHAR(4000)
);
create or replace TABLE DISTRICT (
	A1 VARCHAR(4000),
	A2 VARCHAR(4000),
	A3 VARCHAR(4000),
	A4 VARCHAR(4000),
	A5 VARCHAR(4000),
	A6 VARCHAR(4000),
	A7 VARCHAR(4000),
	A8 VARCHAR(4000),
	A9 VARCHAR(4000),
	A10 VARCHAR(4000),
	A11 VARCHAR(4000),
	A12 VARCHAR(4000),
	A13 VARCHAR(4000),
	A14 VARCHAR(4000),
	A15 VARCHAR(4000),
	A16 VARCHAR(4000)
);
create or replace TABLE DS_EMP (
	EMPNO NUMBER(5,0) NOT NULL,
	ENAME VARCHAR(15) NOT NULL,
	TITLE VARCHAR(50),
	primary key (EMPNO)
);
create or replace TABLE LINEITEM (
	"l_orderkey" VARCHAR(32700),
	"l_partkey" VARCHAR(32700),
	"l_suppkey" VARCHAR(32700),
	"l_linenumber" VARCHAR(32700),
	"l_quantity" VARCHAR(32700),
	"l_extendedprice" VARCHAR(32700),
	"l_discount" VARCHAR(32700),
	"l_tax" VARCHAR(32700),
	"l_returnflag" VARCHAR(32700),
	"l_linestatus" VARCHAR(32700),
	"l_shipdate" VARCHAR(32700),
	"l_commitdate" VARCHAR(32700),
	"l_receiptdate" VARCHAR(32700),
	"l_shipinstruct" VARCHAR(32700),
	"l_shipmode" VARCHAR(32700),
	"l_comment" VARCHAR(32700)
);
create or replace TABLE "LINEITEM_schema" (
	L_ORDERKEY NUMBER(38,0) NOT NULL,
	L_PARTKEY NUMBER(38,0) NOT NULL,
	L_SUPPKEY NUMBER(38,0) NOT NULL,
	L_LINENUMBER NUMBER(38,0) NOT NULL,
	L_QUANTITY NUMBER(15,2) NOT NULL,
	L_EXTENDEDPRICE NUMBER(15,2) NOT NULL,
	L_DISCOUNT NUMBER(15,2) NOT NULL,
	L_TAX NUMBER(15,2) NOT NULL,
	L_RETURNFLAG VARCHAR(1) NOT NULL,
	L_LINESTATUS VARCHAR(1) NOT NULL,
	L_SHIPDATE DATE NOT NULL,
	L_COMMITDATE DATE NOT NULL,
	L_RECEIPTDATE DATE NOT NULL,
	L_SHIPINSTRUCT VARCHAR(25) NOT NULL,
	L_SHIPMODE VARCHAR(10) NOT NULL,
	L_COMMENT VARCHAR(44) NOT NULL
);
create or replace TABLE LOAN (
	"loan_id" VARCHAR(4000),
	"account_id" VARCHAR(4000),
	"date" VARCHAR(4000),
	"amount" VARCHAR(4000),
	"duration" VARCHAR(4000),
	"payments" VARCHAR(4000),
	"status" VARCHAR(4000)
);
create or replace TABLE REGION (
	"r_regionkey" VARCHAR(32700),
	"r_name" VARCHAR(32700),
	"r_comment" VARCHAR(32700)
);
create or replace TABLE SUPPLIER (
	"s_suppkey" VARCHAR(32700),
	"s_name" VARCHAR(32700),
	"s_address" VARCHAR(32700),
	"s_nationkey" VARCHAR(32700),
	"s_phone" VARCHAR(32700),
	"s_acctbal" VARCHAR(32700),
	"s_comment" VARCHAR(32700)
);
create or replace TABLE TRANS (
	"trans_id" VARCHAR(4000) NOT NULL,
	"account_id" VARCHAR(4000),
	"date" VARCHAR(4000),
	"type" VARCHAR(4000),
	"operation" VARCHAR(4000),
	"amount" VARCHAR(4000),
	"balance" VARCHAR(4000),
	"k_symbol" VARCHAR(4000),
	"bank" VARCHAR(4000),
	"account" VARCHAR(4000),
	primary key ("trans_id")
);
create or replace TABLE "client" (
	"client_id" VARCHAR(32700),
	"birth_number" VARCHAR(32700),
	"district_id" VARCHAR(32700)
);
create or replace TABLE "tpcd_lineitemnew" (
	"l_orderkey" VARCHAR(32700),
	"l_partkey" VARCHAR(32700),
	"l_suppkey" VARCHAR(32700),
	"l_linenumber" VARCHAR(32700),
	"l_quantity" VARCHAR(32700),
	"l_extendedprice" VARCHAR(32700),
	"l_discount" VARCHAR(32700),
	"l_tax" VARCHAR(32700),
	"l_returnflag" VARCHAR(32700),
	"l_linestatus" VARCHAR(32700),
	"l_shipdate" VARCHAR(32700),
	"l_commitdate" VARCHAR(32700),
	"l_receiptdate" VARCHAR(32700),
	"l_shipinstruct" VARCHAR(32700),
	"l_shipmode" VARCHAR(32700),
	"l_comment" VARCHAR(32700)
);
create or replace TABLE "tpcd_regionnew" (
	"r_regionkey" VARCHAR(32700),
	"r_name" VARCHAR(32700),
	"r_comment" VARCHAR(32700)
);
create or replace TABLE "tpcd_supplier" (
	"s_suppkey" VARCHAR(32700),
	"s_name" VARCHAR(32700),
	"s_address" VARCHAR(32700),
	"s_nationkey" VARCHAR(32700),
	"s_phone" VARCHAR(32700),
	"s_acctbal" VARCHAR(32700),
	"s_comment" VARCHAR(32700)
);
create or replace schema HUGH;

create or replace TABLE HK_BOOK2 (
	BOOKID VARCHAR(10),
	AUTHOR VARCHAR(64),
	TITLE VARCHAR(64) NOT NULL,
	GENRE VARCHAR(25) NOT NULL
)COMMENT='Book table without allowing nulls'
;
create or replace TABLE HK_BULK_LOAD_TEST (
	"first_name" VARCHAR(32700),
	"last_purchase_date" VARCHAR(32700),
	"Salesperson" VARCHAR(32700),
	"last_name" VARCHAR(32700),
	"customer_id" VARCHAR(32700),
	"store_zone" VARCHAR(32700),
	"store_district" VARCHAR(32700),
	"state" VARCHAR(32700)
);
create or replace TABLE SF_IDS (
	ID VARCHAR(32700)
);
create or replace TABLE TARGETDATETABLE (
	"emp_ID" NUMBER(38,0),
	"emp_name" VARCHAR(60),
	"emp_addr" VARCHAR(60),
	"emp_hiredate" TIMESTAMP_NTZ(9),
	"emp_zipcode" VARCHAR(10)
);
create or replace schema KRUAN;

create or replace TABLE ACCOUNT (
	"AccountNumber" VARCHAR(32700),
	"Id" VARCHAR(32700),
	"Name" VARCHAR(32700),
	"Description" VARCHAR(32700),
	"BillingCity" VARCHAR(32700),
	"BillingState" VARCHAR(32700)
);
create or replace TABLE CCI_DUPLICATES (
	ASK_PRICE VARCHAR(32700),
	BID_PRICE VARCHAR(32700),
	CCI_PIPELINE_DELIVERY_LOCATION VARCHAR(32700),
	CYCLE VARCHAR(32700),
	PIPELINE_PRICE_VOLUME_DATE VARCHAR(32700),
	REPORT_DAY VARCHAR(32700),
	CCI_TIMESTAMP VARCHAR(32700)
);
create or replace TABLE CCI_INSERTS (
	ASK_PRICE VARCHAR(32700),
	BID_PRICE VARCHAR(32700),
	CCI_PIPELINE_DELIVERY_LOCATION VARCHAR(32700),
	CYCLE VARCHAR(32700),
	PIPELINE_PRICE_VOLUME_DATE VARCHAR(32700),
	REPORT_DAY VARCHAR(32700),
	CCI_TIMESTAMP VARCHAR(32700)
);
create or replace TABLE CCI_UPDATES (
	ASK_PRICE VARCHAR(32700),
	BID_PRICE VARCHAR(32700),
	CCI_PIPELINE_DELIVERY_LOCATION VARCHAR(32700),
	CYCLE VARCHAR(32700),
	PIPELINE_PRICE_VOLUME_DATE VARCHAR(32700),
	REPORT_DAY VARCHAR(32700),
	CCI_TIMESTAMP VARCHAR(32700)
);
create or replace TABLE DEMO (
	"AccountNumber" VARCHAR(32700),
	"AnnualRevenue" VARCHAR(32700),
	"City" VARCHAR(32700),
	"Country" VARCHAR(32700),
	"Fax" VARCHAR(32700),
	"Id" VARCHAR(32700),
	"Industry" VARCHAR(32700),
	"Name" VARCHAR(32700),
	"NumberOfEmployees" VARCHAR(32700),
	"Ownership" VARCHAR(32700),
	"Phone" VARCHAR(32700),
	"PostalCode" VARCHAR(32700),
	"State" VARCHAR(32700),
	"Street" VARCHAR(32700),
	"Type" VARCHAR(32700),
	"Website" VARCHAR(32700)
);
create or replace TABLE GITHUB (
	"url" VARCHAR(32700),
	"forks_url" VARCHAR(32700),
	"commits_url" VARCHAR(32700),
	"id" VARCHAR(32700),
	"node_id" VARCHAR(32700),
	"git_pull_url" VARCHAR(32700),
	"git_push_url" VARCHAR(32700),
	"html_url" VARCHAR(32700),
	"public" VARCHAR(32700),
	"created_at" VARCHAR(32700),
	"updated_at" VARCHAR(32700),
	"description" VARCHAR(32700),
	"comments" VARCHAR(32700),
	"user" VARCHAR(32700),
	"comments_url" VARCHAR(32700),
	"truncated" VARCHAR(32700)
);
create or replace TABLE KRUAN.SF_KRUAN (
	"Id" VARCHAR(32700),
	"IsDeleted" VARCHAR(32700),
	"MasterRecordId" VARCHAR(32700),
	"Name" VARCHAR(32700),
	"Type" VARCHAR(32700),
	"ParentId" VARCHAR(32700),
	"BillingStreet" VARCHAR(32700),
	"BillingCity" VARCHAR(32700),
	"BillingState" VARCHAR(32700),
	"BillingPostalCode" VARCHAR(32700),
	"BillingCountry" VARCHAR(32700),
	"BillingLatitude" VARCHAR(32700),
	"BillingLongitude" VARCHAR(32700),
	"ShippingStreet" VARCHAR(32700),
	"ShippingCity" VARCHAR(32700),
	"ShippingState" VARCHAR(32700),
	"ShippingPostalCode" VARCHAR(32700),
	"ShippingCountry" VARCHAR(32700),
	"ShippingLatitude" VARCHAR(32700),
	"ShippingLongitude" VARCHAR(32700),
	"Phone" VARCHAR(32700),
	"Fax" VARCHAR(32700),
	"AccountNumber" VARCHAR(32700),
	"Website" VARCHAR(32700),
	"PhotoUrl" VARCHAR(32700),
	"Sic" VARCHAR(32700),
	"Industry" VARCHAR(32700),
	"AnnualRevenue" VARCHAR(32700),
	"NumberOfEmployees" VARCHAR(32700),
	"Ownership" VARCHAR(32700),
	"TickerSymbol" VARCHAR(32700),
	"Description" VARCHAR(32700),
	"Rating" VARCHAR(32700),
	"Site" VARCHAR(32700),
	"OwnerId" VARCHAR(32700),
	"CreatedDate" VARCHAR(32700),
	"CreatedById" VARCHAR(32700),
	"LastModifiedDate" VARCHAR(32700),
	"LastModifiedById" VARCHAR(32700),
	"SystemModstamp" VARCHAR(32700),
	"LastActivityDate" VARCHAR(32700),
	"LastViewedDate" VARCHAR(32700),
	"LastReferencedDate" VARCHAR(32700),
	"Jigsaw" VARCHAR(32700),
	"JigsawCompanyId" VARCHAR(32700),
	"AccountSource" VARCHAR(32700),
	"SicDesc" VARCHAR(32700),
	"CustomerPriority__c" VARCHAR(32700),
	"SLA__c" VARCHAR(32700),
	"Active__c" VARCHAR(32700),
	"NumberofLocations__c" VARCHAR(32700),
	"UpsellOpportunity__c" VARCHAR(32700),
	"SLASerialNumber__c" VARCHAR(32700),
	"SLAExpirationDate__c" VARCHAR(32700)
);
create or replace TABLE PERSON (
	ID NUMBER(38,0) autoincrement,
	FIRST_NAME VARCHAR(16777216),
	LAST_NAME VARCHAR(16777216),
	AGE NUMBER(38,0),
	TITLE VARCHAR(16777216),
	SCHOOL VARCHAR(16777216),
	ENROLLED NUMBER(38,0),
	CURRENT_ROW NUMBER(38,0),
	START_DATE TIMESTAMP_NTZ(9),
	END_DATE TIMESTAMP_NTZ(9)
);
create or replace TABLE PIPELINE_CHECK_TABLE (
	CCI_ID VARCHAR(32700),
	CCI_PIPELINE_NAME VARCHAR(32700),
	SOURCE_NAME VARCHAR(32700),
	SOURCE_PIPELINE_NAME VARCHAR(32700)
);
create or replace TABLE PRODUCT (
	"Color" VARCHAR(32700),
	"DiscontinuedDate" VARCHAR(32700),
	"ListPrice" VARCHAR(32700),
	"ModifiedDate" VARCHAR(32700),
	"Name" VARCHAR(32700),
	"ProductCategoryID" VARCHAR(32700),
	"ProductID" VARCHAR(32700),
	"ProductModelID" VARCHAR(32700),
	"ProductNumber" VARCHAR(32700),
	"rowguid" VARCHAR(32700),
	"SellEndDate" VARCHAR(32700),
	"SellStartDate" VARCHAR(32700),
	"Size" VARCHAR(32700),
	"StandardCost" VARCHAR(32700),
	"ThumbNailPhoto" VARCHAR(32700),
	"ThumbnailPhotoFileName" VARCHAR(32700),
	"Weight" VARCHAR(32700)
);
create or replace TABLE RABBIT_MESSAGES (
	"msg" VARCHAR(32700),
	"num" VARCHAR(32700)
);
create or replace TABLE SFDCACCOUNTS (
	"Id" VARCHAR(32700),
	"IsDeleted" VARCHAR(32700),
	"MasterRecordId" VARCHAR(32700),
	"Name" VARCHAR(32700),
	"Type" VARCHAR(32700),
	"ParentId" VARCHAR(32700),
	"BillingStreet" VARCHAR(32700),
	"BillingCity" VARCHAR(32700),
	"BillingState" VARCHAR(32700),
	"BillingPostalCode" VARCHAR(32700),
	"BillingCountry" VARCHAR(32700),
	"BillingLatitude" VARCHAR(32700),
	"BillingLongitude" VARCHAR(32700),
	"ShippingStreet" VARCHAR(32700),
	"ShippingCity" VARCHAR(32700),
	"ShippingState" VARCHAR(32700),
	"ShippingPostalCode" VARCHAR(32700),
	"ShippingCountry" VARCHAR(32700),
	"ShippingLatitude" VARCHAR(32700),
	"ShippingLongitude" VARCHAR(32700),
	"ShippingAddress" VARCHAR(32700),
	"Phone" VARCHAR(32700),
	"Fax" VARCHAR(32700),
	"AccountNumber" VARCHAR(32700),
	"Website" VARCHAR(32700),
	"PhotoUrl" VARCHAR(32700),
	"Sic" VARCHAR(32700),
	"Industry" VARCHAR(32700),
	"AnnualRevenue" VARCHAR(32700),
	"NumberOfEmployees" VARCHAR(32700),
	"Ownership" VARCHAR(32700),
	"TickerSymbol" VARCHAR(32700),
	"Description" VARCHAR(32700),
	"Rating" VARCHAR(32700),
	"Site" VARCHAR(32700),
	"OwnerId" VARCHAR(32700),
	"CreatedDate" VARCHAR(32700),
	"CreatedById" VARCHAR(32700),
	"LastModifiedDate" VARCHAR(32700),
	"LastModifiedById" VARCHAR(32700),
	"SystemModstamp" VARCHAR(32700),
	"LastActivityDate" VARCHAR(32700),
	"LastViewedDate" VARCHAR(32700),
	"LastReferencedDate" VARCHAR(32700),
	"Jigsaw" VARCHAR(32700),
	"JigsawCompanyId" VARCHAR(32700),
	"AccountSource" VARCHAR(32700),
	"SicDesc" VARCHAR(32700),
	"CustomerPriority__c" VARCHAR(32700),
	"SLA__c" VARCHAR(32700),
	"Active__c" VARCHAR(32700),
	"NumberofLocations__c" VARCHAR(32700),
	"UpsellOpportunity__c" VARCHAR(32700),
	"SLASerialNumber__c" VARCHAR(32700),
	"SLAExpirationDate__c" VARCHAR(32700),
	"Ext_ID_Test_c__c" VARCHAR(32700),
	"SAP_Comp_Code__c" VARCHAR(32700),
	"SAP_Comp_Name__c" VARCHAR(32700)
);
create or replace TABLE SFDCACCOUNTS_NEW (
	"Id" VARCHAR(32700),
	"IsDeleted" VARCHAR(32700),
	"MasterRecordId" VARCHAR(32700),
	"Name" VARCHAR(32700),
	"Type" VARCHAR(32700),
	"ParentId" VARCHAR(32700),
	"BillingStreet" VARCHAR(32700),
	"BillingCity" VARCHAR(32700),
	"BillingState" VARCHAR(32700),
	"BillingPostalCode" VARCHAR(32700),
	"BillingCountry" VARCHAR(32700),
	"BillingLatitude" VARCHAR(32700),
	"BillingLongitude" VARCHAR(32700),
	"ShippingStreet" VARCHAR(32700),
	"ShippingCity" VARCHAR(32700),
	"ShippingState" VARCHAR(32700),
	"ShippingPostalCode" VARCHAR(32700),
	"ShippingCountry" VARCHAR(32700),
	"ShippingLatitude" VARCHAR(32700),
	"ShippingLongitude" VARCHAR(32700),
	"ShippingAddress" VARCHAR(32700),
	"Phone" VARCHAR(32700),
	"Fax" VARCHAR(32700),
	"AccountNumber" VARCHAR(32700),
	"Website" VARCHAR(32700),
	"PhotoUrl" VARCHAR(32700),
	"Sic" VARCHAR(32700),
	"Industry" VARCHAR(32700),
	"AnnualRevenue" VARCHAR(32700),
	"NumberOfEmployees" VARCHAR(32700),
	"Ownership" VARCHAR(32700),
	"TickerSymbol" VARCHAR(32700),
	"Description" VARCHAR(32700),
	"Rating" VARCHAR(32700),
	"Site" VARCHAR(32700),
	"OwnerId" VARCHAR(32700),
	"CreatedDate" VARCHAR(32700),
	"CreatedById" VARCHAR(32700),
	"LastModifiedDate" VARCHAR(32700),
	"LastModifiedById" VARCHAR(32700),
	"SystemModstamp" VARCHAR(32700),
	"LastActivityDate" VARCHAR(32700),
	"LastViewedDate" VARCHAR(32700),
	"LastReferencedDate" VARCHAR(32700),
	"Jigsaw" VARCHAR(32700),
	"JigsawCompanyId" VARCHAR(32700),
	"AccountSource" VARCHAR(32700),
	"SicDesc" VARCHAR(32700),
	"CustomerPriority__c" VARCHAR(32700),
	"SLA__c" VARCHAR(32700),
	"Active__c" VARCHAR(32700),
	"NumberofLocations__c" VARCHAR(32700),
	"UpsellOpportunity__c" VARCHAR(32700),
	"SLASerialNumber__c" VARCHAR(32700),
	"SLAExpirationDate__c" VARCHAR(32700),
	"Ext_ID_Test_c__c" VARCHAR(32700),
	"SAP_Comp_Code__c" VARCHAR(32700),
	"SAP_Comp_Name__c" VARCHAR(32700)
);
create or replace TABLE SF_ACCOUNT (
	"Id" VARCHAR(32700),
	"IsDeleted" VARCHAR(32700),
	"MasterRecordId" VARCHAR(32700),
	"Name" VARCHAR(32700),
	"Type" VARCHAR(32700),
	"ParentId" VARCHAR(32700),
	"BillingStreet" VARCHAR(32700),
	"BillingCity" VARCHAR(32700),
	"BillingState" VARCHAR(32700),
	"BillingPostalCode" VARCHAR(32700),
	"BillingCountry" VARCHAR(32700),
	"BillingLatitude" VARCHAR(32700),
	"BillingLongitude" VARCHAR(32700),
	"ShippingStreet" VARCHAR(32700),
	"ShippingCity" VARCHAR(32700),
	"ShippingState" VARCHAR(32700),
	"ShippingPostalCode" VARCHAR(32700),
	"ShippingCountry" VARCHAR(32700),
	"ShippingLatitude" VARCHAR(32700),
	"ShippingLongitude" VARCHAR(32700),
	"Phone" VARCHAR(32700),
	"Fax" VARCHAR(32700),
	"AccountNumber" VARCHAR(32700),
	"Website" VARCHAR(32700),
	"PhotoUrl" VARCHAR(32700),
	"Sic" VARCHAR(32700),
	"Industry" VARCHAR(32700),
	"AnnualRevenue" VARCHAR(32700),
	"NumberOfEmployees" VARCHAR(32700),
	"Ownership" VARCHAR(32700),
	"TickerSymbol" VARCHAR(32700),
	"Description" VARCHAR(32700),
	"Rating" VARCHAR(32700),
	"Site" VARCHAR(32700),
	"OwnerId" VARCHAR(32700),
	"CreatedDate" VARCHAR(32700),
	"CreatedById" VARCHAR(32700),
	"LastModifiedDate" VARCHAR(32700),
	"LastModifiedById" VARCHAR(32700),
	"SystemModstamp" VARCHAR(32700),
	"LastActivityDate" VARCHAR(32700),
	"LastViewedDate" VARCHAR(32700),
	"LastReferencedDate" VARCHAR(32700),
	"Jigsaw" VARCHAR(32700),
	"JigsawCompanyId" VARCHAR(32700),
	"AccountSource" VARCHAR(32700),
	"SicDesc" VARCHAR(32700),
	"CustomerPriority__c" VARCHAR(32700),
	"SLA__c" VARCHAR(32700),
	"Active__c" VARCHAR(32700),
	"NumberofLocations__c" VARCHAR(32700),
	"UpsellOpportunity__c" VARCHAR(32700),
	"SLASerialNumber__c" VARCHAR(32700),
	"SLAExpirationDate__c" VARCHAR(32700)
);
create or replace TABLE SQS_MESSAGES (
	"msg" VARCHAR(32700),
	"num" VARCHAR(32700)
);
create or replace TABLE TIME_STAMP (
	LTZ TIMESTAMP_LTZ(9)
);
create or replace TABLE US_CONED_GAS_PRICE_FORECAST_EMAIL (
	REPORT_DAY VARCHAR(32700),
	CCI_TIMESTAMP VARCHAR(32700),
	CYCLE VARCHAR(32700),
	PIPELINE_PRICE_VOLUME_DATE VARCHAR(32700),
	CCI_PIPELINE_DELIVERY_LOCATION VARCHAR(32700),
	BID_PRICE VARCHAR(32700),
	ASK_PRICE VARCHAR(32700)
);
create or replace TABLE US_CONED_GAS_PRICE_FORECAST_EMAIL_BK (
	REPORT_DAY VARCHAR(32700),
	CCI_TIMESTAMP VARCHAR(32700),
	CYCLE VARCHAR(32700),
	PIPELINE_PRICE_VOLUME_DATE VARCHAR(32700),
	CCI_PIPELINE_DELIVERY_LOCATION VARCHAR(32700),
	BID_PRICE VARCHAR(32700),
	ASK_PRICE VARCHAR(32700)
);
create or replace TABLE US_CONED_GAS_PRICE_FORECAST_EMAIL_STAGING (
	ASK_PRICE VARCHAR(32700),
	BID_PRICE VARCHAR(32700),
	CCI_PIPELINE_DELIVERY_LOCATION VARCHAR(32700),
	CCI_TIMESTAMP VARCHAR(32700),
	CYCLE VARCHAR(32700),
	PIPELINE_PRICE_VOLUME_DATE VARCHAR(32700),
	REPORT_DAY VARCHAR(32700)
);
create or replace TABLE US_CONED_GAS_PRICE_FORECAST_EMAIL_STAGING_BK (
	ASK_PRICE VARCHAR(32700),
	BID_PRICE VARCHAR(32700),
	CCI_PIPELINE_DELIVERY_LOCATION VARCHAR(32700),
	CCI_TIMESTAMP VARCHAR(32700),
	CYCLE VARCHAR(32700),
	PIPELINE_PRICE_VOLUME_DATE VARCHAR(32700),
	REPORT_DAY VARCHAR(32700)
);
CREATE OR REPLACE FUNCTION "MULTIPLY"(A NUMBER, B NUMBER)
RETURNS NUMBER(38,0)
LANGUAGE SQL
COMMENT='multiply two numbers'
AS 'a * b';
create or replace schema KUNAL;

create or replace TABLE DEMOSEP27 (
	"Name" VARCHAR(32700),
	"NewID" VARCHAR(32700)
);
create or replace TABLE EMPLOYEE (
	ID NUMBER(38,0),
	FIRST_NAME VARCHAR(16777216),
	LAST_NAME VARCHAR(16777216),
	EMAIL VARCHAR(16777216),
	GENDER VARCHAR(16777216),
	IP_ADDRESS VARCHAR(16777216)
);
create or replace TABLE TEST1_NOV19 (
	"First_Name" VARCHAR(32700),
	"Last_Name" VARCHAR(32700),
	"Hire_Date" VARCHAR(32700),
	"State" VARCHAR(32700)
);
create or replace TABLE WORKDAY_WORKERS_SALARY (
	"userid" VARCHAR(32700),
	"FullName" VARCHAR(32700),
	"Title" VARCHAR(32700),
	"Salary" VARCHAR(32700),
	"newSalary" VARCHAR(32700)
);
create or replace schema PUBLIC;

create or replace TABLE 1.%2.3 (
	NAME VARCHAR(16777216),
	ID VARCHAR(16777216),
	AMOUNT NUMBER(38,0)
);
create or replace TABLE ALTERTABLE (
	C1 NUMBER(38,0),
	C2 NUMBER(38,0),
	C3 VARCHAR(50),
	C4 VARCHAR(16777216)
);
create or replace TABLE BK_FAA_FLIGHT_ACTIVITYINFO (
	FLIGHTREF NUMBER(38,5),
	MESSAGETYPE VARCHAR(120),
	AIRLINE VARCHAR(12),
	SOURCEFACILITY VARCHAR(6),
	SOURCETIMESTAMP VARCHAR(40),
	AIRCRAFTID VARCHAR(24),
	FACILITYIDENTIFIER VARCHAR(12),
	IDNUMBER VARCHAR(20),
	IGTD VARCHAR(40),
	DEPARTUREPOINT_AIRPORT VARCHAR(6),
	ARRIVALPOINT_AIRPORT VARCHAR(6),
	FLIGHTAIRCRAFTSPECS VARCHAR(4),
	EQUIPMENTQUALIFIER VARCHAR(12),
	ETDTYPE VARCHAR(40),
	ETDTIMEVALUE VARCHAR(40),
	ETATYPE VARCHAR(40),
	ETATIMEVALUE VARCHAR(40)
)COMMENT='Demo table for faa flight activity information'
;
create or replace TABLE BK_FAA_FLIGHT_PLANINFO (
	FLIGHTREF NUMBER(38,5),
	MSGTYPE VARCHAR(120),
	SOURCEFACILITY VARCHAR(6),
	SOURCETIMESTAMP VARCHAR(40),
	AIRCRAFTID VARCHAR(24),
	FACILITYIDENTIFIER VARCHAR(120),
	IDNUMBER VARCHAR(20),
	IGTD VARCHAR(40),
	DEPARTUREPOINT_AIRPORT VARCHAR(6),
	ARRIVALPOINT_AIRPORT VARCHAR(6),
	EQUIPMENTQUALIFIER VARCHAR(120),
	SPECIALAIRCRAFTQUALIFIER VARCHAR(120),
	FLIGHTAIRCRAFTSPECS VARCHAR(4),
	FILEDTRUEAIRSPEED NUMBER(38,5),
	COORDINATIONPOINT_NAMEDFIX VARCHAR(120),
	COORDINATION_RADIAL_DIST NUMBER(38,5),
	COORDINATION_RADIAL NUMBER(38,5),
	COORDINATIONTIME_TYPE VARCHAR(120),
	COORDINATIONTIME VARCHAR(40),
	REQUESTEDSIMPLEALTITUDE NUMBER(38,5),
	ASSIGNEDSIMPLEALTITUDE NUMBER(38,5),
	ROUTEOFFLIGHTLEGACYFORMAT VARCHAR(4000),
	ETDTYPE VARCHAR(40),
	ETDTIME VARCHAR(40),
	ETATYPE VARCHAR(40),
	ETATIME VARCHAR(40),
	DIVERSIONINDICATOR VARCHAR(40),
	NEXTPOSITION_LONGITUDEDECIMAL NUMBER(38,5),
	NEXTPOSITION_LATITUDEDECIMAL NUMBER(38,5)
)COMMENT='Demo table for faa flight plan information'
;
create or replace TABLE BK_FAA_FLIGHT_TRACKINFO (
	FLIGHTREF NUMBER(38,5),
	AIRLINE VARCHAR(12),
	SOURCEFACILITY VARCHAR(6),
	SOURCETIMESTAMP VARCHAR(40),
	AIRCRAFTID VARCHAR(24),
	FACILITYIDENTIFIER VARCHAR(12),
	IDNUMBER VARCHAR(20),
	IGTD VARCHAR(40),
	DEPARTUREPOINT_AIRPORT VARCHAR(6),
	ARRIVALPOINT_AIRPORT VARCHAR(6),
	SPEED NUMBER(38,5),
	SIMPLEALTITUDE VARCHAR(6),
	LATITUDEDMS_DEGREE NUMBER(38,5),
	LATITUDEDMS_DIRECTION VARCHAR(12),
	LATITUDEDMS_MINUTES NUMBER(38,5),
	LONGITUDEDMS_DEGREE NUMBER(38,5),
	LONGITUDEDMS_DIRECTION VARCHAR(12),
	LONGITUDEDMS_MINUTES NUMBER(38,5),
	TIMEATPOSITION VARCHAR(40),
	ETATYPE VARCHAR(24),
	TIMEVALUE VARCHAR(40),
	ARRTIME VARCHAR(40),
	FIXNAME VARCHAR(40),
	NEXTEVENT_LATITUDE VARCHAR(120),
	NEXTEVENT_LONGITUDE VARCHAR(120),
	REPORTEDALTITUDE VARCHAR(6),
	ASSIGNEDALTITUDE VARCHAR(6),
	LATITUDEDMS_SECONDS NUMBER(38,5),
	LONGITUDEDMS_SECONDS NUMBER(38,5),
	CURRENT_FLAG NUMBER(38,0),
	START_DATE TIMESTAMP_NTZ(9),
	END_DATE TIMESTAMP_NTZ(9)
)COMMENT='Demo table for faa flight tracking information'
;
create or replace TABLE BK_FAA_FLIGHT_TRACKINFO_CLONE (
	FLIGHTREF NUMBER(38,5),
	AIRLINE VARCHAR(12),
	SOURCEFACILITY VARCHAR(6),
	SOURCETIMESTAMP VARCHAR(40),
	AIRCRAFTID VARCHAR(24),
	FACILITYIDENTIFIER VARCHAR(12),
	IDNUMBER VARCHAR(20),
	IGTD VARCHAR(40),
	DEPARTUREPOINT_AIRPORT VARCHAR(6),
	ARRIVALPOINT_AIRPORT VARCHAR(6),
	SPEED NUMBER(38,5),
	SIMPLEALTITUDE VARCHAR(6),
	LATITUDEDMS_DEGREE NUMBER(38,5),
	LATITUDEDMS_DIRECTION VARCHAR(12),
	LATITUDEDMS_MINUTES NUMBER(38,5),
	LONGITUDEDMS_DEGREE NUMBER(38,5),
	LONGITUDEDMS_DIRECTION VARCHAR(12),
	LONGITUDEDMS_MINUTES NUMBER(38,5),
	TIMEATPOSITION VARCHAR(40),
	ETATYPE VARCHAR(24),
	TIMEVALUE VARCHAR(40),
	ARRTIME VARCHAR(40),
	FIXNAME VARCHAR(40),
	NEXTEVENT_LATITUDE VARCHAR(120),
	NEXTEVENT_LONGITUDE VARCHAR(120),
	REPORTEDALTITUDE VARCHAR(6),
	ASSIGNEDALTITUDE VARCHAR(6),
	LATITUDEDMS_SECONDS NUMBER(38,5),
	LONGITUDEDMS_SECONDS NUMBER(38,5)
)COMMENT='Demo table for faa flight tracking information'
;
create or replace TABLE BK_FAA_TRACKINFO (
	FLIGHTREF NUMBER(38,5),
	AIRLINE VARCHAR(12),
	SOURCEFACILITY VARCHAR(6),
	SOURCETIMESTAMP VARCHAR(40),
	AIRCRAFTID VARCHAR(24),
	FACILITYIDENTIFIER VARCHAR(12),
	IDNUMBER VARCHAR(20),
	IGTD VARCHAR(40),
	DEPARTUREPOINT_AIRPORT VARCHAR(6),
	ARRIVALPOINT_AIRPORT VARCHAR(6),
	SPEED NUMBER(38,5),
	SIMPLEALTITUDE VARCHAR(6),
	LATITUDEDMS_DEGREE NUMBER(38,5),
	LATITUDEDMS_DIRECTION VARCHAR(12),
	LATITUDEDMS_MINUTES NUMBER(38,5),
	LONGITUDEDMS_DEGREE NUMBER(38,5),
	LONGITUDEDMS_DIRECTION VARCHAR(12),
	LONGITUDEDMS_MINUTES NUMBER(38,5),
	TIMEATPOSITION VARCHAR(40),
	ETATYPE VARCHAR(24),
	TIMEVALUE VARCHAR(40),
	ARRTIME VARCHAR(40),
	FIXNAME VARCHAR(40),
	NEXTEVENT_LATITUDE VARCHAR(120),
	NEXTEVENT_LONGITUDE VARCHAR(120),
	REPORTEDALTITUDE VARCHAR(6),
	ASSIGNEDALTITUDE VARCHAR(6),
	LATITUDEDMS_SECONDS NUMBER(38,5),
	LONGITUDEDMS_SECONDS NUMBER(38,5)
)COMMENT='Demo table for faa flight tracking information'
;
create or replace TABLE BK_SFDC_ACCOUNTS (
	"AccountNumber" VARCHAR(32700),
	"BillingCity" VARCHAR(32700),
	"BillingCountry" VARCHAR(32700),
	"BIllingPostalCode" VARCHAR(32700),
	"BillingState" VARCHAR(32700),
	"BillingStreet" VARCHAR(32700),
	"CreatedDate" VARCHAR(32700),
	"CreatedById" VARCHAR(32700),
	"Id" VARCHAR(32700),
	"LastActivityDate" VARCHAR(32700),
	"LastModifiedDate" VARCHAR(32700),
	"MasterRecordId" VARCHAR(32700),
	"Name" VARCHAR(32700),
	"OwnerId" VARCHAR(32700),
	"Phone" VARCHAR(32700)
);
create or replace TABLE DATE_TEST (
	C1 DATE
);
create or replace TABLE DDLTEST (
	NAME VARCHAR(16777216)
);
create or replace TABLE DDLTEST2 (
	NAME VARCHAR(16777216)
);
create or replace TABLE DDLTESTMV (
	NAME VARCHAR(16777216)
);
create or replace TABLE DEMO (
	C1 VARCHAR(16777216)
);
create or replace TABLE DEMOPATAN (
	EMPNO NUMBER(38,0),
	DATE1 DATE,
	DATETIME1 TIME(9),
	TIMESTAMP1 TIMESTAMP_NTZ(9)
)COMMENT='Creating only for dev test purpose'
;
create or replace TABLE DEMOTABLE (
	ID NUMBER(38,0),
	NAME VARCHAR(16777216)
);
create or replace TABLE DEMOTABLE1 (
	ID VARCHAR(16777216),
	NAME VARCHAR(16777216)
);
create or replace TABLE DEMOTABLE3 (
	"Name1" VARCHAR(32700)
);
create or replace TABLE DEMO_SCOTT (
	"full_name" VARCHAR(32700),
	"gender" VARCHAR(32700)
);
create or replace TABLE DEMO_SNOWFLAKE_MULTI_EXEC (
	ID NUMBER(38,0),
	NAME VARCHAR(20)
);
create or replace TABLE DEMO_SNOWFLAKE_MULTI_EXE_DEMO (
	ID NUMBER(38,0),
	NAME VARCHAR(20)
);
create or replace TABLE EB_SNAPRUN_STATE (
	RUUID VARCHAR(16777216) NOT NULL,
	STATE VARCHAR(16777216) NOT NULL,
	LABEL VARCHAR(16777216) NOT NULL,
	STATE_TIMESTAMP VARCHAR(16777216) NOT NULL
)COMMENT='RUUID, status, label and time stamp'
;
create or replace TABLE EMP (
	EMPNO NUMBER(38,0),
	ENAME VARCHAR(16777216),
	JOB VARCHAR(30),
	SAL FLOAT,
	DEPTNO NUMBER(38,0)
);
create or replace TABLE EMPLOYEE (
	EMPID NUMBER(38,0),
	USERNAME VARCHAR(30),
	LASTNAME VARCHAR(30)
);
create or replace TABLE EMPLOYEE1 (
	EMPID NUMBER(38,0),
	LASTNAME VARCHAR(20),
	USERNAME VARCHAR(20)
);
create or replace TABLE EMPLOYEE1_2 (
	LASTNAME VARCHAR(32700),
	USERNAME VARCHAR(32700),
	EMPID VARCHAR(32700)
);
create or replace TABLE "EMPLOYEE1_Paul" (
	LASTNAME VARCHAR(32700),
	USERNAME VARCHAR(32700),
	EMPID VARCHAR(32700)
);
create or replace TABLE EMPLOYEE_EB (
	ID VARCHAR(32700),
	NAME VARCHAR(32700),
	LASTNAME VARCHAR(32700),
	USERNAME VARCHAR(32700)
);
create or replace TABLE EMPLOYEE_EB2 (
	ID VARCHAR(32700),
	NAME VARCHAR(32700),
	LASTNAME VARCHAR(32700),
	USERNAME VARCHAR(32700)
);
create or replace TABLE EMPLOYEE_EB3 (
	"full_name" VARCHAR(32700),
	"gender" VARCHAR(32700)
);
create or replace TABLE EMPLOYEE_EB4 (
	"id" VARCHAR(32700),
	"full_name" VARCHAR(32700),
	"gender" VARCHAR(32700)
);
create or replace TABLE EMPLOYEE_EB5 (
	ID VARCHAR(32700),
	NAME VARCHAR(32700),
	GENDER VARCHAR(32700)
);
create or replace TABLE EMPLOYEE_EB6 (
	"id" VARCHAR(32700),
	"name" VARCHAR(32700),
	"gender" VARCHAR(32700)
);
create or replace TABLE "EMPLOYEE_EB_Schema" (
	"lat" VARCHAR(8000),
	"long" VARCHAR(8000),
	"facility_id" VARCHAR(8000),
	"inspection_date" TIMESTAMP_NTZ(9),
	"process_description" VARCHAR(8000),
	"restaurant_name" VARCHAR(8000),
	"score" VARCHAR(8000),
	"zip_code" VARCHAR(8000)
);
create or replace TABLE EMPLOYEE_LOWER (
	"empid" NUMBER(38,0),
	"username" VARCHAR(30),
	"lastname" VARCHAR(30)
);
create or replace TABLE EMPLOYEE_SCHEMA_123 (
	"lat" VARCHAR(8000),
	"long" VARCHAR(8000),
	"facility_id" VARCHAR(8000),
	"inspection_date" TIMESTAMP_NTZ(9),
	"process_description" VARCHAR(8000),
	"restaurant_name" VARCHAR(8000),
	"score" VARCHAR(8000),
	"zip_code" VARCHAR(8000)
);
create or replace TABLE EMPLOYEE_UPPER (
	EMPID NUMBER(38,0),
	USERNAME VARCHAR(30),
	LASTNAME VARCHAR(30)
);
create or replace TABLE IJ_DATES (
	ID NUMBER(38,0),
	DATEVALUE TIMESTAMP_NTZ(9),
	ISHOLIDAY BOOLEAN
)COMMENT='R&D Date values from SQL CTE'
;
create or replace TABLE INFUTORDEMO (
	"id" VARCHAR(32700),
	"empname" VARCHAR(32700),
	"Empnum" VARCHAR(32700),
	"WorkorderID" VARCHAR(32700),
	"NonBillableHours" VARCHAR(32700),
	"BillableHours" VARCHAR(32700),
	"Price" VARCHAR(32700),
	"Revenue" VARCHAR(32700),
	"DateDone" VARCHAR(32700),
	"Year" VARCHAR(32700),
	"Month" VARCHAR(32700),
	"Week" VARCHAR(32700),
	"MonthID" VARCHAR(32700),
	"CustomerID" VARCHAR(32700),
	"Currency" VARCHAR(32700),
	"Category" VARCHAR(32700),
	"Description" VARCHAR(32700),
	"Comments" VARCHAR(32700),
	"ContractNumber" VARCHAR(32700),
	"WorkType" VARCHAR(32700),
	"UseContract" VARCHAR(32700),
	"ProdCode" VARCHAR(32700)
);
create or replace TABLE INSERTTAB (
	"name" VARCHAR(32700),
	"number" VARCHAR(32700)
);
create or replace TABLE INSERTTAB1 (
	"name" VARCHAR(32700),
	"number" VARCHAR(32700)
);
create or replace TABLE JIM_TEST (
	ID FLOAT NOT NULL,
	NAME VARCHAR(16777216)
)COMMENT='test execute number of rows'
;
create or replace TABLE JSON_DAN_TEST (
	V VARIANT
);
create or replace TABLE JSON_SAMPLE (
	JSON_COLUMN VARIANT
);
create or replace TABLE KEVINBOOLEANTEST (
	"databaseMajorVersion" VARCHAR(32700),
	"databaseProductVersion" VARCHAR(32700),
	"databaseProductName" VARCHAR(32700),
	"databaseMinorVersion" VARCHAR(32700)
);
create or replace TABLE KEVINTIMETABLE1 (
	TIMECOL VARCHAR(32700)
);
create or replace TABLE KEVIN_BOOLEAN_SUCC (
	BOOL BOOLEAN
);
create or replace TABLE KEVIN_INSERT_TEST (
	ID VARCHAR(16777216)
);
create or replace TABLE KEVIN_JSON_TEST (
	NAME VARCHAR(16777216),
	ID VARCHAR(16777216)
);
create or replace TABLE KEVIN_JSON_TEST_2 (
	NAME VARCHAR(16777216),
	ID VARCHAR(16777216)
);
create or replace TABLE KEVIN_LOAD_TEST (
	DATE DATE
);
create or replace TABLE KEVIN_NUM_TEST (
	R FLOAT
)COMMENT='For number test purpose'
;
create or replace TABLE KEVIN_TEST (
	ID VARCHAR(16777216) NOT NULL,
	NAME VARCHAR(16777216) NOT NULL,
	MACHINE VARCHAR(16777216),
	COUNT NUMBER(38,0)
);
create or replace TABLE LG_SCOTT1 (
	FULL_NAME VARCHAR(32700),
	GENDER VARCHAR(32700),
	TIMESTAMP VARCHAR(32700)
);
create or replace TABLE MYTABLE (
	NAME VARCHAR(16777216),
	ID VARCHAR(16777216),
	AMOUNT NUMBER(38,0)
);
create or replace TABLE "MYTABLE LIST2" (
	OUTLOOK_PRODUCT_GROUP_C VARCHAR(32700),
	TERRITORY_ASSIGNMENT_C VARCHAR(32700),
	NAMED_ACCOUNT_C VARCHAR(32700),
	ADOBE_ROLE_C VARCHAR(32700),
	USER_ID_C VARCHAR(32700),
	TERRITORY_TEAM_MEMBER_C VARCHAR(32700),
	RULE_NAME_C VARCHAR(32700),
	ACCOUNT_GLOBAL_REGION_C VARCHAR(32700),
	BYPASS_PTNR_GEO_CHK_C VARCHAR(32700),
	ACCOUNT_C VARCHAR(32700),
	ID VARCHAR(32700),
	TAOVERLAYCOMPOSITEID_C VARCHAR(32700)
);
create or replace TABLE MYTABLE1 (
	OUTLOOK_PRODUCT_GROUP_C VARCHAR(32700),
	TERRITORY_ASSIGNMENT_C VARCHAR(32700),
	NAMED_ACCOUNT_C VARCHAR(32700),
	ADOBE_ROLE_C VARCHAR(32700),
	USER_ID_C VARCHAR(32700),
	TERRITORY_TEAM_MEMBER_C VARCHAR(32700),
	RULE_NAME_C VARCHAR(32700),
	ACCOUNT_GLOBAL_REGION_C VARCHAR(32700),
	BYPASS_PTNR_GEO_CHK_C VARCHAR(32700),
	ACCOUNT_C VARCHAR(32700),
	ID VARCHAR(32700),
	TAOVERLAYCOMPOSITEID_C VARCHAR(32700)
);
create or replace TABLE MYTABLE2 (
	NAME VARCHAR(16777216),
	ID VARCHAR(16777216),
	AMOUNT NUMBER(38,0)
);
create or replace TABLE MYTABLE2COPY (
	NAME VARCHAR(16777216),
	ID VARCHAR(16777216),
	AMOUNT NUMBER(38,0)
);
create or replace TABLE MYTABLE3 (
	NAME VARCHAR(16777216),
	ID NUMBER(38,0),
	AMOUNT NUMBER(38,0)
);
create or replace TABLE MYTABLE5 (
	NAME VARCHAR(16777216),
	ID NUMBER(38,0),
	AMOUNT NUMBER(38,0)
);
create or replace TABLE MYTABLETABLESTAGE (
	NAME VARCHAR(16777216),
	ID VARCHAR(16777216),
	AMOUNT NUMBER(38,0)
);
create or replace TABLE NAN_TEST (
	NANTEST VARCHAR(10)
);
create or replace TABLE NDW_NAM (
	NAM_SURID NUMBER(10,0) NOT NULL autoincrement,
	NAM_EFFECTIVE_DATE_SURID NUMBER(10,0),
	NAM_CURRENT_FLG VARCHAR(1),
	NAM_NAT_ACCT_GROUP_SCID VARCHAR(15),
	NAM_NAT_ACCT_GROUP VARCHAR(20),
	NAM_NAT_ACCT_ID VARCHAR(15),
	NAM_NAT_ACCT_NAME VARCHAR(30),
	NAM_NAT_ACCT_ADDRESS VARCHAR(30),
	NAM_NAT_ACCT_EXTRA_ADDRESS VARCHAR(30),
	NAM_NAT_ACCT_COUNTRY VARCHAR(36),
	NAM_NAT_ACCT_CITY VARCHAR(20),
	NAM_NAT_ACCT_PROVINCE VARCHAR(20),
	NAM_NAT_ACCT_STATE VARCHAR(2),
	NAM_NAT_ACCT_ZIP_CODE VARCHAR(9),
	NAM_NAT_ACCT_PHONE VARCHAR(10),
	NAM_KEY_CONTACT_PERSON VARCHAR(15),
	NAM_KEY_PERSON_TITLE VARCHAR(10),
	NAM_ALT_CONTACT_PERSON VARCHAR(15),
	NAM_ALT_PERSON_TITLE VARCHAR(10),
	NAM_NASE_NAME VARCHAR(15),
	NAM_NAC_NAME VARCHAR(15),
	NAM_TOTAL_LOCATIONS NUMBER(10,0),
	NAM_ARATEX_LOCATIONS NUMBER(10,0),
	NAM_SUBCONTRACT_LOCATIONS NUMBER(10,0),
	NAM_WEEKLY_RENTAL_VOLUME NUMBER(19,0),
	NAM_RESTRICTED_INVENTORY VARCHAR(1),
	NAM_INCREASE_TERMS VARCHAR(1),
	NAM_INCREASE_START_DATE TIMESTAMP_NTZ(9),
	NAM_INCREASE_PCT_1 NUMBER(5,0),
	NAM_INCREASE_PCT_2 NUMBER(5,0),
	NAM_INCREASE_PCT_3 NUMBER(5,0),
	NAM_INCREASE_PCT_4 NUMBER(5,0),
	NAM_INCREASE_PCT_5 NUMBER(5,0),
	NAM_CONTRACT_START_DATE TIMESTAMP_NTZ(9),
	NAM_CONTRACT_END_DATE TIMESTAMP_NTZ(9),
	NAM_LAST_QCM_SENT_DATE TIMESTAMP_NTZ(9),
	NAM_COMMISSION_DUE_DATE TIMESTAMP_NTZ(9),
	NAM_COMMISSION_PAID_DATE TIMESTAMP_NTZ(9),
	NAM_CUSTOMER_REPORT VARCHAR(1),
	NAM_ACCOUNT_TYPE VARCHAR(1),
	NAM_SIC_CODE NUMBER(10,0),
	NAM_LAST_TRANSMIT_DATE TIMESTAMP_NTZ(9),
	NAM_ITEM_CHANGE_DATE TIMESTAMP_NTZ(9),
	NAM_LOCATION_CHANGE_DATE TIMESTAMP_NTZ(9),
	NAM_AR_CUSTOMER_NUMBER NUMBER(10,0),
	NAM_RATE_CONTROL_FLAG VARCHAR(1),
	NAM_SALES_REPORT_FLAG VARCHAR(1),
	NAM_AR_BILLING_FLAG VARCHAR(1),
	NAM_RECORD_STATUS VARCHAR(1),
	NAM_TERM_DATE TIMESTAMP_NTZ(9),
	NAM_COMMENTS_1 VARCHAR(60),
	NAM_COMMENTS_2 VARCHAR(60),
	NAM_FISCAL_START_MONTH NUMBER(38,0),
	NAM_SCHEDULER_COMMENTS VARCHAR(40),
	NAM_1_YR_FOLLOW_SENT_FLAG VARCHAR(1),
	NAM_6_MO_FOLLOW_SENT_FLAG VARCHAR(1),
	NAM_TERM_TYPE_FLAG VARCHAR(1),
	NAM_QTRLY_QCM_FLAG VARCHAR(1),
	NAM_INCR_COMPLETED_FLAG VARCHAR(1),
	NAM_INCREASE_CCYYMM_1 VARCHAR(6),
	NAM_INCREASE_CCYYMM_2 VARCHAR(6),
	NAM_INCREASE_CCYYMM_3 VARCHAR(6),
	NAM_INCREASE_CCYYMM_4 VARCHAR(6),
	NAM_INCREASE_CCYYMM_5 VARCHAR(6),
	NAM_INCREASE_WAIVED_1 VARCHAR(1),
	NAM_INCREASE_WAIVED_2 VARCHAR(1),
	NAM_INCREASE_WAIVED_3 VARCHAR(1),
	NAM_INCREASE_WAIVED_4 VARCHAR(1),
	NAM_INCREASE_WAIVED_5 VARCHAR(1),
	NAM_QTR_ANNUAL_REBATE_FLAG VARCHAR(1),
	NAM_REBATE_PCT NUMBER(5,0),
	NAM_LAST_REBATE_PAID NUMBER(18,0),
	NAM_RENTAL_YN_FLAG VARCHAR(1),
	NAM_LR_YN_FLAG VARCHAR(1),
	NAM_NOG_YN_FLAG VARCHAR(1),
	NAM_DIR_SLS_FLAG VARCHAR(1),
	NAM_PERCENT_RATE_CHANGE NUMBER(5,0),
	NAM_PERCENT_RATE_DATE TIMESTAMP_NTZ(9),
	NAM_RATE_OVERRIDE_FLAG VARCHAR(1),
	NAM_OPTION_FLAG VARCHAR(1),
	NAM_CONTRACT_ANNIVERSARY_MMDD VARCHAR(4),
	NAM_CPI_COMMENT_SEQ_NO_1 NUMBER(10,0),
	NAM_CPI_COMMENTS_1 VARCHAR(78),
	NAM_CPI_COMMENT_SEQ_NO_2 NUMBER(10,0),
	NAM_CPI_COMMENTS_2 VARCHAR(78),
	NAM_CPI_COMMENT_SEQ_NO_3 NUMBER(10,0),
	NAM_CPI_COMMENTS_3 VARCHAR(78),
	NAM_CPI_COMMENT_SEQ_NO_4 NUMBER(10,0),
	NAM_CPI_COMMENTS_4 VARCHAR(78),
	NAM_CPI_COMMENT_SEQ_NO_5 NUMBER(10,0),
	NAM_CPI_COMMENTS_5 VARCHAR(78),
	NAM_CPI_COMMENT_SEQ_NO_6 NUMBER(10,0),
	NAM_CPI_COMMENTS_6 VARCHAR(78),
	NAM_CPI_COMMENT_SEQ_NO_7 NUMBER(10,0),
	NAM_CPI_COMMENTS_7 VARCHAR(78),
	NAM_CPI_COMMENT_SEQ_NO_8 NUMBER(10,0),
	NAM_CPI_COMMENTS_8 VARCHAR(78),
	NAM_CHANGES_LOCKED VARCHAR(1),
	NAM_DISCOUNT_PCT NUMBER(4,0),
	CREATED_TIMESTAMP TIMESTAMP_NTZ(9),
	LAST_UPDATED_TIMESTAMP TIMESTAMP_NTZ(9),
	NAM_LOSS_DOLLAR_START_DATE TIMESTAMP_NTZ(9),
	NAM_LOSS_DOLLAR_END_DATE TIMESTAMP_NTZ(9),
	constraint PK_NDW_NAM_NAM_SURID primary key (NAM_SURID)
);
create or replace TABLE NEWTABLETEST (
	"msg23" VARCHAR(32700),
	"num23" VARCHAR(32700)
);
create or replace TABLE PERSONS (
	PERSONID NUMBER(38,0),
	LASTNAME VARCHAR(255),
	FIRSTNAME VARCHAR(255),
	ADDRESS VARCHAR(255),
	CITY VARCHAR(255)
);
create or replace TABLE PRASANNA (
	C1 VARCHAR(16777216),
	C2 NUMBER(38,0)
);
create or replace TABLE "PUBLIC.Test" (
	PERSONID NUMBER(38,0),
	FIRSTNAME VARCHAR(255)
);
create or replace TABLE "Prasanna table" (
	C1STRING VARCHAR(16777216),
	C2INT NUMBER(38,0),
	C2TIMESTAMP TIMESTAMP_NTZ(9),
	C2DOUBLE FLOAT
);
create or replace TABLE ROBIN_DATETIME_TEST (
	SOMEDATE TIMESTAMP_NTZ(9)
);
create or replace TABLE SNAP_3462 (
	C_DATE DATE,
	C_TIME TIME(9)
);
create or replace TABLE SNAP_3927 (
	"id" VARCHAR(32700),
	"name" VARCHAR(32700)
);
create or replace TABLE SNAP_4352 (
	ID NUMBER(38,0),
	NAME VARCHAR(20)
);
create or replace TABLE SNAP_4352_1 (
	ID NUMBER(38,0),
	NAME VARCHAR(20)
);
create or replace TABLE SNOWFLAKETABLE (
	NAME VARCHAR(32700),
	ID VARCHAR(32700),
	AMOUNT VARCHAR(32700)
);
create or replace TABLE STUDENT (
	"advisor" VARCHAR(32700),
	"campus" VARCHAR(32700),
	"first_name" VARCHAR(32700),
	"last_name" VARCHAR(32700),
	"last_update" VARCHAR(32700),
	"major" VARCHAR(32700),
	"student_id" VARCHAR(32700),
	"ruuid" VARCHAR(32700)
);
create or replace TABLE SWAT951 (
	ID NUMBER(38,0),
	NAME VARCHAR(16777216)
);
create or replace TABLE SWAT_1100 (
	ID NUMBER(38,0),
	NAME VARCHAR(10)
);
create or replace TABLE SWAT_1418 (
	"Id" NUMBER(38,0),
	"Name" VARCHAR(20)
);
create or replace TABLE "Servicenow_incidents" (
	"active" VARCHAR(32700),
	"comments" VARCHAR(32700),
	"update_date" VARCHAR(32700),
	"priority" VARCHAR(32700),
	"incident_number" VARCHAR(32700),
	"contact_type" VARCHAR(32700)
);
create or replace TABLE T1 (
	A1 NUMBER(38,0)
);
create or replace TABLE TABLE1 (
	C1 VARCHAR(16777216),
	C2 NUMBER(38,0)
);
create or replace TABLE TABLECOPY (
	ID VARCHAR(32700),
	NAME VARCHAR(32700),
	"input1_ID" VARCHAR(32700),
	"input1_NAME" VARCHAR(32700)
);
create or replace TABLE TERENCE_TABLEFROMORACLE (
	"Testone" VARCHAR(20)
);
create or replace TABLE TERENCE_TEST (
	NAME VARCHAR(16777216),
	ID VARCHAR(16777216),
	AMOUNT NUMBER(38,0)
);
create or replace TABLE TEST (
	ID NUMBER(38,0),
	NAME VARCHAR(16777216),
	TESTNUMBER NUMBER(10,0),
	TESTNUMBER1 NUMBER(38,0)
);
create or replace TABLE TEST2 (
	ID NUMBER(38,0),
	NAME VARCHAR(16777216),
	AMOUNT NUMBER(38,0)
);
create or replace TABLE TESTCREATE (
	ID NUMBER(38,0),
	NAME VARCHAR(16777216)
);
create or replace TABLE TESTDEMO (
	"client_id" VARCHAR(32700),
	"birth_number" VARCHAR(32700),
	"district_id" VARCHAR(32700)
);
create or replace TABLE TESTDEMO1 (
	"client_id" VARCHAR(32700),
	"birth_number" VARCHAR(32700),
	"district_id" VARCHAR(32700)
);
create or replace TABLE "TESTSha" (
	"msg" VARCHAR(32700),
	"num" VARCHAR(32700)
);
create or replace TABLE TEST_BULKLOAD (
	NAME VARCHAR(16777216),
	ID VARCHAR(16777216),
	AMOUNT NUMBER(38,0)
);
create or replace TABLE TEST_BULKLOAD2 (
	NAME VARCHAR(16777216),
	ID VARCHAR(16777216),
	AMOUNT NUMBER(38,0)
);
create or replace TABLE TEST_K (
	"birth_number" VARCHAR(32700),
	"client_id" VARCHAR(32700),
	"district_id" VARCHAR(32700)
);
create or replace TABLE TEST_UPLOAD (
	ID VARCHAR(32700),
	NAME VARCHAR(32700)
);
create or replace TABLE "TEST_update_temp_table_73f23fee_c55a_422e_a8ee_ed80b96d85dd" (
	ID NUMBER(38,0),
	NAME VARCHAR(16777216)
);
create or replace TABLE TIMESTAMPTABLEFROMORACLE2 (
	COLUMN1 TIMESTAMP_NTZ(9)
);
create or replace TABLE TT1 (
	A1 NUMBER(38,0)
);
create or replace TABLE TTT1 (
	A1 NUMBER(38,0)
);
create or replace TABLE "demotable" (
	"msg" VARCHAR(32700),
	"num" VARCHAR(32700)
);
create or replace TABLE "t1_1" (
	B1 VARCHAR(16777216)
);
create or replace TABLE "t2_2" (
	A1 NUMBER(38,0),
	A2 VARCHAR(16777216),
	A3 DATE
);
create or replace TABLE "tabletable" (
	ID NUMBER(38,0)
);
CREATE OR REPLACE FILE FORMAT MY_FORMAT
	FIELD_DELIMITER = '|'
	NULL_IF = ('NULL', 'null')
	VALIDATE_UTF8 = FALSE
;
CREATE OR REPLACE FILE FORMAT TSV
	TYPE = csv
	VALIDATE_UTF8 = FALSE
;
CREATE OR REPLACE FILE FORMAT XMLX
	TYPE = xml
;
create or replace schema RICH;

create or replace schema SCOTT;

create or replace TABLE DEMO_ACCOUNTS (
	"Id" VARCHAR(32700),
	"IsDeleted" VARCHAR(32700),
	"AccountId" VARCHAR(32700),
	"IsPrivate" VARCHAR(32700),
	"Name" VARCHAR(32700),
	"Description" VARCHAR(32700),
	"StageName" VARCHAR(32700),
	"Amount" VARCHAR(32700),
	"Probability" VARCHAR(32700),
	"ExpectedRevenue" VARCHAR(32700),
	"TotalOpportunityQuantity" VARCHAR(32700),
	"CloseDate" VARCHAR(32700),
	"Type" VARCHAR(32700),
	"NextStep" VARCHAR(32700),
	"LeadSource" VARCHAR(32700),
	"IsClosed" VARCHAR(32700),
	"IsWon" VARCHAR(32700),
	"ForecastCategory" VARCHAR(32700),
	"ForecastCategoryName" VARCHAR(32700),
	"CampaignId" VARCHAR(32700),
	"HasOpportunityLineItem" VARCHAR(32700),
	"Pricebook2Id" VARCHAR(32700),
	"OwnerId" VARCHAR(32700),
	"CreatedDate" VARCHAR(32700),
	"CreatedById" VARCHAR(32700),
	"LastModifiedDate" VARCHAR(32700),
	"LastModifiedById" VARCHAR(32700),
	"SystemModstamp" VARCHAR(32700),
	"LastActivityDate" VARCHAR(32700),
	"FiscalQuarter" VARCHAR(32700),
	"FiscalYear" VARCHAR(32700),
	"Fiscal" VARCHAR(32700),
	"LastViewedDate" VARCHAR(32700),
	"LastReferencedDate" VARCHAR(32700),
	"DeliveryInstallationStatus__c" VARCHAR(32700),
	"TrackingNumber__c" VARCHAR(32700),
	"OrderNumber__c" VARCHAR(32700),
	"CurrentGenerators__c" VARCHAR(32700),
	"MainCompetitors__c" VARCHAR(32700),
	"SAP_Sales_Document__c" VARCHAR(32700),
	"LeadCreatedDate__c" VARCHAR(32700),
	"NetsuiteSOId__c" VARCHAR(32700),
	"OpportunityCreatedDate__c" VARCHAR(32700),
	"Reltio_ID__c" VARCHAR(32700),
	"Customer_PO__c" VARCHAR(32700),
	"AccountID" VARCHAR(32700)
);
create or replace TABLE DEMO_MALES2 (
	"full_name" VARCHAR(32700),
	"gender" VARCHAR(32700),
	"timestamp" VARCHAR(32700)
);
create or replace TABLE DEMO_MALES3 (
	"full_name" VARCHAR(32700),
	"gender" VARCHAR(32700)
);
create or replace TABLE DEMO_TEST (
	"full_name" VARCHAR(32700),
	"gender" VARCHAR(32700)
);
create or replace TABLE "Opportunity" (
	"Customer_PO__c" VARCHAR(32700),
	"OpportunityCreatedDate__c" VARCHAR(32700),
	"SAP_Sales_Document__c" VARCHAR(32700),
	"LastModifiedById" VARCHAR(32700),
	"OwnerId" VARCHAR(32700),
	"CloseDate" VARCHAR(32700),
	"OrderNumber__c" VARCHAR(32700),
	"Type" VARCHAR(32700),
	"Reltio_ID__c" VARCHAR(32700),
	"AccountID" VARCHAR(32700),
	"NetsuiteSOId__c" VARCHAR(32700),
	"Description" VARCHAR(32700),
	"DeliveryInstallationStatus__c" VARCHAR(32700),
	"CampaignId" VARCHAR(32700),
	"LastModifiedDate" VARCHAR(32700),
	"ForecastCategoryName" VARCHAR(32700),
	"CreatedById" VARCHAR(32700),
	"MainCompetitors__c" VARCHAR(32700),
	"LastViewedDate" VARCHAR(32700),
	"LastActivityDate" VARCHAR(32700),
	"IsDeleted" VARCHAR(32700),
	"Fiscal" VARCHAR(32700),
	"Name" VARCHAR(32700),
	"CurrentGenerators__c" VARCHAR(32700),
	"FiscalYear" VARCHAR(32700),
	"IsWon" VARCHAR(32700),
	"TrackingNumber__c" VARCHAR(32700),
	"Amount" VARCHAR(32700),
	"LeadSource" VARCHAR(32700),
	"LastReferencedDate" VARCHAR(32700),
	"IsPrivate" VARCHAR(32700),
	"TotalOpportunityQuantity" VARCHAR(32700),
	"Pricebook2Id" VARCHAR(32700),
	"StageName" VARCHAR(32700),
	"Probability" VARCHAR(32700),
	"FiscalQuarter" VARCHAR(32700),
	"HasOpportunityLineItem" VARCHAR(32700),
	"LeadCreatedDate__c" VARCHAR(32700),
	"IsClosed" VARCHAR(32700),
	"NextStep" VARCHAR(32700),
	"SystemModstamp" VARCHAR(32700),
	"CreatedDate" VARCHAR(32700),
	"ForecastCategory" VARCHAR(32700),
	"Id" VARCHAR(32700),
	"ExpectedRevenue" VARCHAR(32700)
);
create or replace TABLE REALESTATE_TRANSACTIONS (
	"street" VARCHAR(32700),
	"city" VARCHAR(32700),
	"zip" VARCHAR(32700),
	"state" VARCHAR(32700),
	"beds" VARCHAR(32700),
	"baths" VARCHAR(32700),
	"sq__ft" VARCHAR(32700),
	"type" VARCHAR(32700),
	"sale_date" VARCHAR(32700),
	"price" VARCHAR(32700),
	"latitude" VARCHAR(32700),
	"longitude" VARCHAR(32700)
);
create or replace schema SFDC;

create or replace TABLE ACCOUNTS (
	"BillingCity" VARCHAR(32700),
	"AccountNumber" VARCHAR(32700),
	"BillingCountry" VARCHAR(32700)
);
create or replace schema SHANKAR;

create or replace schema VISH;

create or replace TABLE LINE23 (
	L_ORDERKEY NUMBER(38,0) NOT NULL,
	L_PARTKEY NUMBER(38,0) NOT NULL,
	L_SUPPKEY NUMBER(38,0) NOT NULL,
	L_LINENUMBER NUMBER(38,0) NOT NULL,
	L_QUANTITY NUMBER(15,2) NOT NULL,
	L_EXTENDEDPRICE NUMBER(15,2) NOT NULL,
	L_DISCOUNT NUMBER(15,2) NOT NULL,
	L_TAX NUMBER(15,2) NOT NULL,
	L_RETURNFLAG VARCHAR(1) NOT NULL,
	L_LINESTATUS VARCHAR(1) NOT NULL,
	L_SHIPDATE DATE NOT NULL,
	L_COMMITDATE DATE NOT NULL,
	L_RECEIPTDATE DATE NOT NULL,
	L_SHIPINSTRUCT VARCHAR(25) NOT NULL,
	L_SHIPMODE VARCHAR(10) NOT NULL,
	L_COMMENT VARCHAR(44) NOT NULL
);
create or replace TABLE LINEITEM (
	"l_orderkey" VARCHAR(32700),
	"l_partkey" VARCHAR(32700),
	"l_suppkey" VARCHAR(32700),
	"l_linenumber" VARCHAR(32700),
	"l_quantity" VARCHAR(32700),
	"l_extendedprice" VARCHAR(32700),
	"l_discount" VARCHAR(32700),
	"l_tax" VARCHAR(32700),
	"l_returnflag" VARCHAR(32700),
	"l_linestatus" VARCHAR(32700),
	"l_shipdate" VARCHAR(32700),
	"l_commitdate" VARCHAR(32700),
	"l_receiptdate" VARCHAR(32700),
	"l_shipinstruct" VARCHAR(32700),
	"l_shipmode" VARCHAR(32700),
	"l_comment" VARCHAR(32700)
);
create or replace TABLE MYSQLCUSTOMER (
	"first_name" VARCHAR(32700),
	"last_update" VARCHAR(32700),
	"create_date" VARCHAR(32700),
	"email" VARCHAR(32700),
	"address_id" VARCHAR(32700),
	"last_name" VARCHAR(32700),
	"store_id" VARCHAR(32700),
	"active" VARCHAR(32700),
	"customer_id" VARCHAR(32700)
);
create or replace TABLE REGION (
	"r_regionkey" VARCHAR(32700),
	"r_name" VARCHAR(32700),
	"r_comment" VARCHAR(32700)
);
create or replace TABLE SFDCACCOUNTS (
	"Id" VARCHAR(32700),
	"IsDeleted" VARCHAR(32700),
	"MasterRecordId" VARCHAR(32700),
	"Name" VARCHAR(32700),
	"Type" VARCHAR(32700),
	"ParentId" VARCHAR(32700),
	"BillingStreet" VARCHAR(32700),
	"BillingCity" VARCHAR(32700),
	"BillingState" VARCHAR(32700),
	"BillingPostalCode" VARCHAR(32700),
	"BillingCountry" VARCHAR(32700),
	"BillingLatitude" VARCHAR(32700),
	"BillingLongitude" VARCHAR(32700),
	"ShippingStreet" VARCHAR(32700),
	"ShippingCity" VARCHAR(32700),
	"ShippingState" VARCHAR(32700),
	"ShippingPostalCode" VARCHAR(32700),
	"ShippingCountry" VARCHAR(32700),
	"ShippingLatitude" VARCHAR(32700),
	"ShippingLongitude" VARCHAR(32700),
	"ShippingAddress" VARCHAR(32700),
	"Phone" VARCHAR(32700),
	"Fax" VARCHAR(32700),
	"AccountNumber" VARCHAR(32700),
	"Website" VARCHAR(32700),
	"PhotoUrl" VARCHAR(32700),
	"Sic" VARCHAR(32700),
	"Industry" VARCHAR(32700),
	"AnnualRevenue" VARCHAR(32700),
	"NumberOfEmployees" VARCHAR(32700),
	"Ownership" VARCHAR(32700),
	"TickerSymbol" VARCHAR(32700),
	"Description" VARCHAR(32700),
	"Rating" VARCHAR(32700),
	"Site" VARCHAR(32700),
	"OwnerId" VARCHAR(32700),
	"CreatedDate" VARCHAR(32700),
	"CreatedById" VARCHAR(32700),
	"LastModifiedDate" VARCHAR(32700),
	"LastModifiedById" VARCHAR(32700),
	"SystemModstamp" VARCHAR(32700),
	"LastActivityDate" VARCHAR(32700),
	"LastViewedDate" VARCHAR(32700),
	"LastReferencedDate" VARCHAR(32700),
	"Jigsaw" VARCHAR(32700),
	"JigsawCompanyId" VARCHAR(32700),
	"AccountSource" VARCHAR(32700),
	"SicDesc" VARCHAR(32700),
	"CustomerPriority__c" VARCHAR(32700),
	"SLA__c" VARCHAR(32700),
	"Active__c" VARCHAR(32700),
	"NumberofLocations__c" VARCHAR(32700),
	"UpsellOpportunity__c" VARCHAR(32700),
	"SLASerialNumber__c" VARCHAR(32700),
	"SLAExpirationDate__c" VARCHAR(32700),
	"Ext_ID_Test_c__c" VARCHAR(32700),
	"SAP_Comp_Code__c" VARCHAR(32700),
	"SAP_Comp_Name__c" VARCHAR(32700)
);
create or replace TABLE TWEETS (
	"sfdc_email" VARCHAR(32700),
	"name" VARCHAR(32700),
	"friendsCount" VARCHAR(32700),
	"followersCount" VARCHAR(32700),
	"retweetCount" VARCHAR(32700)
);
create or replace TABLE "Teradataschema" (
	"EmpName" VARCHAR(32768),
	"EmpID" NUMBER(38,0)
);
create or replace TABLE WORKDAYTESTWORKERS (
	WORKDAYID VARCHAR(16777216),
	DATA VARIANT
)COMMENT='Test JSON variant upload'
;
create or replace TABLE WORKDAYTESTWORKERS1 (
	WORKDAYID VARCHAR(32700)
);
create or replace TABLE WORKDAYTESTWORKERS2 (
	WORKDAYID VARCHAR(32700)
);
create or replace TABLE WORKDAY_TEST (
	"wd:Worker_ID" VARCHAR(32700),
	"wd:User_ID" VARCHAR(32700)
);
create or replace TABLE "test" (
	"client_id" VARCHAR(32700),
	"birth_number" VARCHAR(32700),
	"district_id" VARCHAR(32700)
);
create or replace TABLE "test_oracle_schema" (
	"netID" VARCHAR(4000),
	"address" VARCHAR(4000),
	"city" VARCHAR(4000),
	"company_name" VARCHAR(4000),
	"county" VARCHAR(4000),
	"Customer_Key" VARCHAR(4000),
	"email" VARCHAR(4000),
	"first_name" VARCHAR(4000),
	"last_name" VARCHAR(4000),
	"phone1" VARCHAR(4000),
	"state" VARCHAR(4000),
	"zip" VARCHAR(4000)
);
CREATE OR REPLACE FILE FORMAT WORKDAYTEST
	TYPE = JSON
;